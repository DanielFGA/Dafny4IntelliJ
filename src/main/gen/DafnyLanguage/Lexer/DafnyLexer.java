/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package DafnyLanguage.Lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static DafnyLanguage.psi.impl.DafnyTypeImpl.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>DafnyLexer.flex</tt>
 */
public class DafnyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\10\3\1\5\66\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\103\1\2\2\76\1\2\22\0\1\103\1\62\1\70\4\0\1\66\1\60\1\61\1\64\1\0"+
    "\1\35\1\0\1\41\1\102\1\71\11\74\1\34\1\43\1\65\1\37\1\44\1\77\1\73\1\23\2"+
    "\72\1\20\2\72\2\100\1\21\2\100\1\24\1\100\1\22\1\16\2\100\1\17\10\100\1\56"+
    "\1\67\1\57\1\101\1\75\1\42\1\10\1\3\1\6\1\46\1\15\1\50\1\27\1\7\1\12\1\25"+
    "\1\53\1\5\1\30\1\13\1\4\1\33\1\32\1\11\1\26\1\14\1\31\1\47\1\51\1\52\1\45"+
    "\1\100\1\54\1\36\1\55\7\0\1\1\234\0\1\40\5\0\2\1\66\0\1\63\37\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\21\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\5\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\1\22\1\23\1\24"+
    "\1\3\1\1\1\25\1\1\1\25\1\1\2\3\1\26"+
    "\16\3\1\27\1\3\1\30\3\3\1\31\25\3\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\12\3\1\0\1\40"+
    "\1\0\1\3\3\0\1\41\2\0\1\25\2\0\1\42"+
    "\2\3\2\43\1\3\1\44\26\3\1\45\6\3\1\46"+
    "\1\47\17\3\1\50\1\51\3\3\1\52\7\3\1\53"+
    "\3\3\1\54\7\3\1\55\2\56\2\0\1\57\1\60"+
    "\1\25\1\41\1\0\1\61\13\3\1\62\1\63\1\64"+
    "\5\3\1\65\11\3\1\66\1\67\2\3\1\70\1\71"+
    "\1\72\1\3\1\73\1\74\1\3\1\75\30\3\1\76"+
    "\5\3\2\0\1\57\1\60\1\57\1\42\1\77\1\100"+
    "\1\3\1\101\1\102\1\3\1\103\3\3\1\104\5\3"+
    "\1\105\12\3\1\106\10\3\1\107\2\3\1\110\6\3"+
    "\1\111\1\3\1\112\3\3\1\113\1\114\1\3\1\115"+
    "\1\116\1\3\2\0\1\117\1\120\7\3\1\121\1\122"+
    "\1\123\1\124\1\3\1\125\5\3\1\126\3\3\1\127"+
    "\1\3\1\130\1\3\1\131\1\132\1\3\1\133\1\134"+
    "\1\135\6\3\1\136\2\3\1\137\2\3\2\0\1\140"+
    "\6\3\1\141\1\142\1\3\1\143\1\144\1\145\3\3"+
    "\1\146\1\3\1\147\1\150\1\151\12\3\1\152\1\3"+
    "\1\153\2\3\1\154\1\3\1\155\2\3\1\156\1\157"+
    "\1\160\1\161\1\3\1\162\1\3\1\163\1\3\1\164"+
    "\1\3\1\165\3\3\1\166\1\167\1\170\1\171\1\172"+
    "\1\173\1\174\2\3\1\175\1\176\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\104\0\104\0\u0594"+
    "\0\104\0\u05d8\0\104\0\104\0\104\0\u061c\0\u0660\0\u06a4"+
    "\0\u06e8\0\u072c\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\u0770\0\104\0\104\0\104\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\u08c4\0\u0908\0\u094c\0\u0990\0\u01dc\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u01dc\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\104"+
    "\0\104\0\104\0\104\0\104\0\u14b8\0\u14fc\0\u1540\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4"+
    "\0\104\0\u17e8\0\u182c\0\u1870\0\u07f8\0\u18b4\0\104\0\u18f8"+
    "\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u01dc"+
    "\0\u1b18\0\u1b5c\0\u01dc\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u01dc\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc"+
    "\0\u01dc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u270c\0\u01dc\0\u01dc\0\u2750\0\u2794\0\u27d8\0\u01dc\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\104\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u01dc\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4"+
    "\0\u2c18\0\u2c5c\0\104\0\104\0\u0cc0\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u0880\0\u2df4\0\u01dc\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234"+
    "\0\u01dc\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410"+
    "\0\u3454\0\u3498\0\u01dc\0\u01dc\0\u34dc\0\u3520\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u3564\0\u01dc\0\u01dc\0\u35a8\0\u01dc\0\u35ec\0\u3630"+
    "\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850"+
    "\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70"+
    "\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u01dc\0\u3c4c"+
    "\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c"+
    "\0\u18f8\0\104\0\u01dc\0\u3eb0\0\u3ef4\0\u01dc\0\u01dc\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u01dc\0\u408c\0\u40d0\0\u4114"+
    "\0\u4158\0\u419c\0\u01dc\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0"+
    "\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444\0\u01dc\0\u4488\0\u44cc"+
    "\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u01dc\0\u46a8"+
    "\0\u46ec\0\u01dc\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884"+
    "\0\u01dc\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u01dc\0\u01dc"+
    "\0\u4a1c\0\u01dc\0\u01dc\0\u4a60\0\u4aa4\0\u4ae8\0\u01dc\0\u01dc"+
    "\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08"+
    "\0\u0cc0\0\u0cc0\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0"+
    "\0\u4ee4\0\u4f28\0\u01dc\0\u4f6c\0\u4fb0\0\u4ff4\0\u01dc\0\u5038"+
    "\0\u01dc\0\u507c\0\u01dc\0\u01dc\0\u50c0\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u01dc\0\u529c"+
    "\0\u52e0\0\u01dc\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u01dc\0\u5434"+
    "\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u0cc0\0\u01dc\0\u55cc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u5610\0\u5654\0\u5698\0\u01dc\0\u56dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830"+
    "\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u01dc\0\u59c8\0\u01dc"+
    "\0\u5a0c\0\u5a50\0\u0cc0\0\u5a94\0\u01dc\0\u5ad8\0\u5b1c\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u5b60\0\u01dc\0\u5ba4\0\u01dc\0\u5be8"+
    "\0\u01dc\0\u5c2c\0\u01dc\0\u5c70\0\u5cb4\0\u5cf8\0\u0cc0\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u5d3c\0\u5d80\0\u01dc"+
    "\0\u01dc\0\u01dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\7\10\1\20"+
    "\1\21\1\22\1\23\1\10\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\10\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\2"+
    "\1\56\1\57\1\10\1\60\1\61\1\2\1\3\2\10"+
    "\1\2\1\62\1\3\106\0\1\3\73\0\1\3\4\0"+
    "\1\3\3\0\1\10\1\63\4\10\1\64\22\10\6\0"+
    "\1\10\2\0\1\65\1\10\1\66\4\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\1\67\1\10\1\70\25\10\1\71\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\5\10\1\72\4\10"+
    "\1\73\16\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\1\10\1\74\1\75\1\10\1\76\1\77\23\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\1\100"+
    "\1\101\1\102\3\101\1\103\14\101\1\104\5\101\11\0"+
    "\7\101\15\0\2\101\1\0\2\101\1\0\2\101\6\0"+
    "\12\10\1\105\16\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\10\10\1\106\1\107\11\10\1\110\1\10"+
    "\1\111\3\10\6\0\1\10\2\0\3\10\1\112\3\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\5\10\1\113\4\10\1\114\13\10"+
    "\1\115\2\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\4\10\1\116\1\10\1\117\22\10\6\0\1\10"+
    "\2\0\1\120\3\10\1\121\2\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\2\10\1\122\5\10\1\123\20\10\6\0\1\10\2\0"+
    "\5\10\1\124\1\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\14\10\1\125"+
    "\14\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\11\10\1\126\1\127\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\4\10\1\130\24\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\1\10\1\131\3\10"+
    "\1\132\4\10\1\133\13\10\1\134\2\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\10\10\1\135\20\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\5\10"+
    "\1\136\1\137\22\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\36\0\1\140\1\0\1\141\1\142\103\0\1\143"+
    "\4\0\1\144\100\0\1\145\45\0\7\10\1\146\21\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\5\10"+
    "\1\147\4\10\1\150\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\5\10\1\151\23\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\1\10\1\152\3\10"+
    "\1\153\1\154\17\10\1\155\2\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\4\10\1\156\2\10\1\157"+
    "\21\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\14\0"+
    "\1\160\24\0\1\161\44\0\2\162\1\0\31\163\11\162"+
    "\7\163\4\162\2\0\5\162\1\164\1\162\2\163\1\162"+
    "\2\163\1\162\2\163\3\162\2\165\1\0\64\165\1\166"+
    "\1\167\13\165\1\170\2\0\47\170\1\171\16\170\1\172"+
    "\2\170\2\172\1\0\5\170\70\0\1\173\13\0\1\170"+
    "\2\0\66\170\1\172\2\170\2\172\1\0\5\170\64\0"+
    "\1\174\15\0\1\175\4\0\1\10\1\176\27\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\177"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\31\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\1\200\1\10\1\0\1\201\1\10\1\0"+
    "\3\10\5\0\22\10\1\202\6\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\31\10\6\0\1\10\2\0"+
    "\1\10\1\203\5\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\204"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\1\205\30\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\25\10\1\206\3\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\2\10\1\207\5\10\1\210\14\10"+
    "\1\211\2\10\1\212\6\0\1\10\2\0\1\10\1\213"+
    "\5\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\5\10\1\214\23\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\5\10\1\215"+
    "\23\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\2\10\1\216\20\10\1\217\5\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\23\101\1\220\5\101\11\0"+
    "\7\101\15\0\2\101\1\0\2\101\1\0\2\101\6\0"+
    "\31\101\11\0\7\101\15\0\2\101\1\0\2\101\1\0"+
    "\2\101\6\0\2\101\1\221\26\101\11\0\7\101\15\0"+
    "\2\101\1\0\2\101\1\0\2\101\6\0\6\101\1\222"+
    "\22\101\11\0\7\101\15\0\2\101\1\0\2\101\1\0"+
    "\2\101\6\0\23\101\1\223\5\101\11\0\7\101\15\0"+
    "\2\101\1\0\2\101\1\0\2\101\6\0\5\10\1\224"+
    "\3\10\1\225\15\10\1\226\1\10\6\0\1\10\2\0"+
    "\2\10\1\227\1\230\3\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\3\10"+
    "\1\231\5\10\1\232\17\10\6\0\1\10\2\0\1\10"+
    "\1\233\1\234\4\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\235"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\12\10\1\236\16\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\5\10\1\237\22\10\1\240\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\241\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\10"+
    "\6\0\1\10\2\0\4\10\1\242\2\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\2\10\1\243\26\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\7\10\1\244\2\10\1\245\16\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\5\10"+
    "\1\246\20\10\1\247\2\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\30\10\1\250\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\1\10\1\251\27\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\23\10\1\252"+
    "\5\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\23\10\1\253\5\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\7\10\1\254\1\10\1\255\16\10\1\256"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\15\10"+
    "\1\257\13\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\5\10\1\260\1\261\22\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\11\10\1\262\15\10\1\263"+
    "\1\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\1\10\1\264\27\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\31\10\6\0\1\10\2\0\1\10\1\265"+
    "\5\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\11\10\1\266\16\10\1\267"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\11\10"+
    "\1\270\17\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\2\10\1\271\26\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\3\10\1\272\25\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\6\10\1\273\22\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\1\10"+
    "\1\274\5\10\1\275\2\10\1\276\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\43\0\1\277\45\0\12\10"+
    "\1\300\16\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\11\10\1\301\17\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\3\10\1\302\25\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\6\10\1\303\22\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\6\10"+
    "\1\304\22\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\2\10\1\305\26\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\12\10\1\306\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\10\10\1\307\20\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\7\10"+
    "\1\310\2\10\1\311\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\11\10\1\312\17\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\15\0\1\313\156\0\1\314"+
    "\20\0\31\101\11\0\7\101\12\0\1\315\2\0\2\101"+
    "\1\0\2\101\1\0\2\101\14\0\1\162\1\0\2\162"+
    "\14\0\1\316\35\0\3\162\23\0\1\165\1\0\2\165"+
    "\14\0\1\317\35\0\3\165\103\0\1\320\2\0\1\320"+
    "\12\0\1\321\2\0\1\321\1\0\1\321\4\0\1\321"+
    "\2\0\1\321\2\0\1\321\22\0\1\321\1\0\1\321"+
    "\20\0\2\321\1\0\1\321\7\0\1\170\2\0\66\170"+
    "\1\322\2\170\1\322\1\170\1\0\5\170\70\173\1\323"+
    "\13\173\64\174\1\324\17\174\1\175\2\0\73\175\1\0"+
    "\5\175\3\0\2\10\1\325\26\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\5\10\1\326\23\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\31\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\1\201\1\10\1\0\1\201\1\10\1\0\3\10\5\0"+
    "\12\10\1\327\16\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\10\10\1\330\20\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\12\10\1\331\16\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\25\10\1\332"+
    "\3\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\12\10\1\333\16\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\23\10\1\334\5\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\12\10\1\335\16\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\6\10\1\336"+
    "\22\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\5\10\1\337\23\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\23\10\1\340\5\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\6\10\1\341\22\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\3\10\1\342"+
    "\25\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\12\10\1\343\16\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\11\101\1\344\17\101\11\0\7\101\15\0"+
    "\2\101\1\0\2\101\1\0\2\101\6\0\1\101\1\345"+
    "\27\101\11\0\7\101\15\0\2\101\1\0\2\101\1\0"+
    "\2\101\6\0\5\101\1\346\23\101\11\0\7\101\15\0"+
    "\2\101\1\0\2\101\1\0\2\101\6\0\12\101\1\347"+
    "\13\101\1\350\2\101\11\0\7\101\15\0\2\101\1\0"+
    "\2\101\1\0\2\101\6\0\2\10\1\351\26\10\6\0"+
    "\1\10\2\0\1\10\1\352\5\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\26\10\1\353\2\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\26\10\1\354\2\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\12\10\1\355\16\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\7\10\1\356"+
    "\21\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\2\10\1\357\26\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\26\10\1\360\2\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\5\10\1\361\23\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\6\10\1\362"+
    "\22\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\11\10\1\363\17\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\30\10\1\364\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\1\10\1\365\27\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\366\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\2\10"+
    "\1\367\26\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\23\10\1\370\5\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\10\10\1\371\20\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\7\10\1\372\21\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\12\10"+
    "\1\373\16\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\12\10\1\374\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\23\10\1\375\5\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\12\10\1\376\16\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\26\10"+
    "\1\377\2\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\23\10\1\u0100\5\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\12\10\1\u0101\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\1\10\1\u0102\27\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\16\10"+
    "\1\u0103\12\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\11\10\1\u0104\17\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\7\10\1\u0105\21\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\23\10\1\u0106\5\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\7\10"+
    "\1\u0107\16\10\1\u0108\2\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\3\10\1\u0109\25\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\4\10\1\u010a\24\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\11\10"+
    "\1\u010b\17\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\4\10\1\u010c\24\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\5\10\1\u010d\23\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\u010e\17\10"+
    "\6\0\1\10\2\0\2\10\1\u010f\4\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\10\10\1\u0110\20\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\31\10\6\0\1\10\2\0\1\10"+
    "\1\u0111\5\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\2\10\1\u0112\26\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\5\10"+
    "\1\u0113\23\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\6\10\1\u0114\22\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\5\10\1\u0115\23\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\23\10\1\u0116\5\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\12\10"+
    "\1\u0117\10\10\1\u0118\5\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\3\10\1\u0119\25\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\2\10\1\u011a\26\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\6\10"+
    "\1\u011b\22\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\10\10\1\u011c\20\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\1\u011d\2\0\1\u011d\1\0\1\u011d"+
    "\4\0\1\u011d\2\0\1\u011d\2\0\1\u011d\22\0\1\u011d"+
    "\1\0\1\u011d\20\0\2\u011d\1\0\1\u011d\12\0\1\u011e"+
    "\2\0\1\u011e\1\0\1\u011e\4\0\1\u011e\2\0\1\u011e"+
    "\2\0\1\u011e\22\0\1\u011e\1\0\1\u011e\20\0\2\u011e"+
    "\1\0\1\u011e\100\0\1\u011f\2\0\2\u011f\11\0\1\u0120"+
    "\2\0\1\u0120\1\0\1\u0120\4\0\1\u0120\2\0\1\u0120"+
    "\2\0\1\u0120\22\0\1\u0120\1\0\1\u0120\20\0\2\u0120"+
    "\1\0\2\u0120\6\0\1\170\2\0\66\170\1\322\2\170"+
    "\1\322\1\u0121\1\0\5\170\64\174\1\324\15\174\1\u0122"+
    "\1\174\3\0\31\10\6\0\1\10\2\0\6\10\1\u0123"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\3\10\1\u0124\25\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\12\10\1\u0125\16\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\2\10"+
    "\1\u0126\26\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\5\10\1\u0127\23\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\25\10\1\u0128\3\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\u0129\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\11\10"+
    "\1\u012a\17\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\12\10\1\u012b\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\11\10\1\u012c\17\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\23\10\1\u012d\5\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\6\101"+
    "\1\u012e\22\101\11\0\7\101\15\0\2\101\1\0\2\101"+
    "\1\0\2\101\6\0\3\101\1\u012f\25\101\11\0\7\101"+
    "\15\0\2\101\1\0\2\101\1\0\2\101\6\0\31\101"+
    "\11\0\1\u0130\6\101\15\0\2\101\1\0\2\101\1\0"+
    "\2\101\6\0\6\101\1\u0131\22\101\11\0\7\101\15\0"+
    "\2\101\1\0\2\101\1\0\2\101\6\0\25\101\1\u0132"+
    "\3\101\11\0\7\101\15\0\2\101\1\0\2\101\1\0"+
    "\2\101\6\0\23\10\1\u0133\5\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\6\10\1\u0134\22\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\7\10\1\u0135"+
    "\21\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\5\10\1\u0136\23\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\10\10\1\u0137\20\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\26\10\1\u0138\2\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\3\10\1\u0139"+
    "\25\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\6\10\1\u013a\22\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\5\10\1\u013b\23\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\6\10\1\u013c\22\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\31\10\6\0"+
    "\1\10\2\0\1\u013d\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\11\10"+
    "\1\u013e\17\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\11\10\1\u013f\17\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\6\10\1\u0140\22\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\u0141\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\10\10"+
    "\1\u0142\20\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\6\10\1\u0143\22\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\17\10\1\u0144\11\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\7\10\1\u0145\21\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\10\10"+
    "\1\u0146\20\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\11\10\1\u0147\17\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\31\10\6\0\1\10\2\0\3\10"+
    "\1\u0148\3\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\2\10\1\u0149\26\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\4\10"+
    "\1\u014a\24\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\1\10\1\u014b\27\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\7\10\1\u014c\21\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\5\10\1\u014d\23\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\2\10"+
    "\1\u014e\26\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\12\10\1\u014f\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\7\10\1\u0150\21\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\u0151\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\7\10"+
    "\1\u0152\21\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\31\10\6\0\1\10\2\0\1\10\1\u0153\5\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\11\10\1\u0154\17\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\12\10\1\u0155\16\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\2\10"+
    "\1\u0156\26\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\12\10\1\u0157\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\4\10\1\u0158\24\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\u0159\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\12\10"+
    "\1\u015a\16\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\12\10\1\u015b\16\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\12\10\1\u015c\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\1\u015d\2\0\1\u015d"+
    "\1\0\1\u015d\4\0\1\u015d\2\0\1\u015d\2\0\1\u015d"+
    "\22\0\1\u015d\1\0\1\u015d\20\0\2\u015d\1\0\1\u015d"+
    "\12\0\1\u015e\2\0\1\u015e\1\0\1\u015e\4\0\1\u015e"+
    "\2\0\1\u015e\2\0\1\u015e\22\0\1\u015e\1\0\1\u015e"+
    "\20\0\2\u015e\1\0\1\u015e\100\0\1\u011f\2\0\1\u011f"+
    "\12\0\1\u0120\2\0\1\u0120\1\0\1\u0120\4\0\1\u0120"+
    "\2\0\1\u0120\2\0\1\u0120\22\0\1\u0120\1\0\1\u0120"+
    "\20\0\2\u0120\1\0\1\u0120\12\0\11\10\1\u015f\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\10"+
    "\6\0\1\10\2\0\1\10\1\u0160\5\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\25\10\1\u0161\3\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\6\10\1\u0162\22\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\4\10\1\u0163\24\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\10"+
    "\6\0\1\10\2\0\1\10\1\u0164\5\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\5\10\1\u0165\23\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\5\101\1\u0166\23\101\11\0\7\101"+
    "\15\0\2\101\1\0\2\101\1\0\2\101\6\0\5\101"+
    "\1\u0167\23\101\11\0\7\101\15\0\2\101\1\0\2\101"+
    "\1\0\2\101\6\0\31\101\11\0\7\101\15\0\2\101"+
    "\1\0\1\u0168\1\101\1\0\2\101\6\0\11\101\1\u0169"+
    "\17\101\11\0\7\101\15\0\2\101\1\0\2\101\1\0"+
    "\2\101\6\0\12\101\1\u016a\16\101\11\0\7\101\15\0"+
    "\2\101\1\0\2\101\1\0\2\101\6\0\10\10\1\u016b"+
    "\20\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\6\10\1\u016c\22\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\2\10\1\u016d\26\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\12\10\1\u016e\16\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\31\10\6\0"+
    "\1\10\2\0\1\10\1\u016f\5\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\11\10\1\u0170\17\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\7\10\1\u0171\21\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\11\10\1\u0172\17\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\11\10\1\u0173"+
    "\17\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\30\10\1\u0174\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\5\10\1\u0175\23\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\12\10\1\u0176\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\23\10\1\u0177\5\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\10"+
    "\6\0\1\10\2\0\1\10\1\u0178\5\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\11\10\1\u0179\17\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\20\10\1\u017a\10\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\3\10\1\u017b\25\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\24\10"+
    "\1\u017c\4\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\7\10\1\u017d\21\10\6\0\1\10\2\0\1\u017e"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\12\10\1\u017f\16\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\31\10\6\0"+
    "\1\10\2\0\1\10\1\u0180\5\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\23\10\1\u0181\5\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\10\10\1\u0182\20\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\2\10\1\u0183\26\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\3\10\1\u0184"+
    "\25\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\31\10\6\0\1\10\2\0\1\10\1\u0185\5\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\3\10\1\u0186\25\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\23\10\1\u0187\5\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\31\10\6\0"+
    "\1\10\2\0\1\u0188\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\5\10"+
    "\1\u0189\23\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\2\10\1\u018a\26\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\7\10\1\u018b\21\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\23\10\1\u018c\5\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\1\u018d"+
    "\2\0\1\u018d\1\0\1\u018d\4\0\1\u018d\2\0\1\u018d"+
    "\2\0\1\u018d\22\0\1\u018d\1\0\1\u018d\20\0\2\u018d"+
    "\1\0\1\u018d\12\0\1\u018e\2\0\1\u018e\1\0\1\u018e"+
    "\4\0\1\u018e\2\0\1\u018e\2\0\1\u018e\22\0\1\u018e"+
    "\1\0\1\u018e\20\0\2\u018e\1\0\1\u018e\12\0\5\10"+
    "\1\u018f\23\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\26\10\1\u0190\2\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\1\10\1\u0191\27\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\7\10\1\u0192\21\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\11\10"+
    "\1\u0193\17\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\3\101\1\u0194\25\101\11\0\7\101\15\0\2\101"+
    "\1\0\2\101\1\0\2\101\6\0\11\101\1\u0195\17\101"+
    "\11\0\7\101\15\0\2\101\1\0\2\101\1\0\2\101"+
    "\6\0\31\101\11\0\7\101\15\0\1\u0168\1\101\1\0"+
    "\1\u0168\1\101\1\0\1\u0196\1\101\6\0\23\10\1\u0197"+
    "\5\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\12\10\1\u0198\16\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\23\10\1\u0199\5\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\23\10\1\u019a\5\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\u019b"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\7\10\1\u019c\21\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\5\10\1\u019d\23\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\1\10\1\u019e\27\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\u019f"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\11\10\1\u01a0\17\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\23\10\1\u01a1\5\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\23\10\1\u01a2\5\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\21\10\1\u01a3"+
    "\7\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\12\10\1\u01a4\16\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\12\10\1\u01a5\16\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\24\10\1\u01a6\4\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\u01a7"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\11\10\1\u01a8\17\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\12\10\1\u01a9\16\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\5\10\1\u01aa\23\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\30\10\1\u01ab"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\23\10"+
    "\1\u01ac\5\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\1\10\1\u01ad\27\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\23\10\1\u01ae\5\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\1\162\2\0\1\162"+
    "\1\0\1\162\4\0\1\162\2\0\1\162\2\0\1\162"+
    "\22\0\1\162\1\0\1\162\20\0\2\162\1\0\1\162"+
    "\12\0\1\165\2\0\1\165\1\0\1\165\4\0\1\165"+
    "\2\0\1\165\2\0\1\165\22\0\1\165\1\0\1\165"+
    "\20\0\2\165\1\0\1\165\12\0\3\10\1\u01af\25\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\10"+
    "\6\0\1\10\2\0\1\10\1\u01b0\5\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\3\10\1\u01b1\25\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\31\10\6\0\1\10\2\0\1\u01b2"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\11\101\1\u01b3\17\101\11\0"+
    "\7\101\15\0\2\101\1\0\2\101\1\0\2\101\6\0"+
    "\12\101\1\u01b4\16\101\11\0\7\101\15\0\2\101\1\0"+
    "\2\101\1\0\2\101\6\0\23\10\1\u01b5\5\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\31\10\6\0"+
    "\1\10\2\0\2\10\1\u01b6\4\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\10\10\1\u01b7\20\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\6\10\1\u01b8\22\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\12\10\1\u01b9\16\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\23\10\1\u01ba"+
    "\5\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\11\10\1\u01bb\17\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\12\10\1\u01bc\16\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\2\10\1\u01bd\26\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\u01be"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\23\10\1\u01bf\5\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\11\10\1\u01c0\17\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\12\10\1\u01c1\16\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\12\10\1\u01c2"+
    "\16\10\6\0\1\10\2\0\7\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\5\0"+
    "\10\10\1\u01c3\20\10\6\0\1\10\2\0\7\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\5\0\11\10\1\u01c4\17\10\6\0\1\10\2\0"+
    "\7\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\5\0\5\10\1\u01c5\23\10\6\0"+
    "\1\10\2\0\7\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\5\0\30\10\1\u01c6"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\101"+
    "\11\0\1\101\1\u01c7\5\101\15\0\2\101\1\0\2\101"+
    "\1\0\2\101\6\0\12\10\1\u01c8\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\11\10\1\u01c9\17\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\31\10"+
    "\6\0\1\10\2\0\1\10\1\u01ca\5\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\31\10\6\0\1\10\2\0\1\10\1\u01cb\5\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\12\10\1\u01cc\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\23\10\1\u01cd\5\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\1\10"+
    "\1\u01ce\27\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\5\0\11\10\1\u01cf\17\10\6\0\1\10\2\0\7\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\5\0\12\10\1\u01d0\16\10\6\0\1\10"+
    "\2\0\7\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\5\0\6\10\1\u01d1\22\10"+
    "\6\0\1\10\2\0\7\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\5\0\12\10"+
    "\1\u01d2\16\10\6\0\1\10\2\0\7\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\2\11\1\1\1\11\1\1\3\11"+
    "\5\1\6\11\1\1\3\11\63\1\5\11\13\1\1\0"+
    "\1\11\1\0\1\1\3\0\1\11\2\0\1\1\2\0"+
    "\102\1\1\11\13\1\2\11\1\1\2\0\4\1\1\0"+
    "\110\1\2\0\3\1\1\11\72\1\2\0\56\1\2\0"+
    "\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public DafnyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DafnyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 128: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 129: break;
          case 3: 
            { return IDENTDEF;
            } 
            // fall through
          case 130: break;
          case 4: 
            { return COLON;
            } 
            // fall through
          case 131: break;
          case 5: 
            { return COMMA;
            } 
            // fall through
          case 132: break;
          case 6: 
            { return VERTICALBAR;
            } 
            // fall through
          case 133: break;
          case 7: 
            { return BULLET;
            } 
            // fall through
          case 134: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 135: break;
          case 9: 
            { return BACKTICK;
            } 
            // fall through
          case 136: break;
          case 10: 
            { return SEMI;
            } 
            // fall through
          case 137: break;
          case 11: 
            { return CLOSEANGLEBRACKET;
            } 
            // fall through
          case 138: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 139: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 140: break;
          case 14: 
            { return LBRACKET;
            } 
            // fall through
          case 141: break;
          case 15: 
            { return RBRACKET;
            } 
            // fall through
          case 142: break;
          case 16: 
            { return OPENPAREN;
            } 
            // fall through
          case 143: break;
          case 17: 
            { return CLOSEPAREN;
            } 
            // fall through
          case 144: break;
          case 18: 
            { return NEQALT;
            } 
            // fall through
          case 145: break;
          case 19: 
            { return STAR;
            } 
            // fall through
          case 146: break;
          case 20: 
            { return OPENANGLEBRACKET;
            } 
            // fall through
          case 147: break;
          case 21: 
            { return DIGITS;
            } 
            // fall through
          case 148: break;
          case 22: 
            { return BY;
            } 
            // fall through
          case 149: break;
          case 23: 
            { return AS;
            } 
            // fall through
          case 150: break;
          case 24: 
            { return IN;
            } 
            // fall through
          case 151: break;
          case 25: 
            { return IF;
            } 
            // fall through
          case 152: break;
          case 26: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 153: break;
          case 27: 
            { return BOREDSMILEY;
            } 
            // fall through
          case 154: break;
          case 28: 
            { return GETS;
            } 
            // fall through
          case 155: break;
          case 29: 
            { return EQ;
            } 
            // fall through
          case 156: break;
          case 30: 
            { return DARROW;
            } 
            // fall through
          case 157: break;
          case 31: 
            { return TWODOTS;
            } 
            // fall through
          case 158: break;
          case 32: 
            { return NEQ;
            } 
            // fall through
          case 159: break;
          case 33: 
            { return STRINGTOKEN;
            } 
            // fall through
          case 160: break;
          case 34: 
            { return COMMENT;
            } 
            // fall through
          case 161: break;
          case 35: 
            { return BVTOKEN;
            } 
            // fall through
          case 162: break;
          case 36: 
            { return OLD;
            } 
            // fall through
          case 163: break;
          case 37: 
            { return INT;
            } 
            // fall through
          case 164: break;
          case 38: 
            { return NATTOKEN;
            } 
            // fall through
          case 165: break;
          case 39: 
            { return NEW;
            } 
            // fall through
          case 166: break;
          case 40: 
            { return SET;
            } 
            // fall through
          case 167: break;
          case 41: 
            { return SEQ;
            } 
            // fall through
          case 168: break;
          case 42: 
            { return MAP;
            } 
            // fall through
          case 169: break;
          case 43: 
            { return ELLIPSIS;
            } 
            // fall through
          case 170: break;
          case 44: 
            { return VAR;
            } 
            // fall through
          case 171: break;
          case 45: 
            { return NOTIN;
            } 
            // fall through
          case 172: break;
          case 46: 
            { return CHARTOKEN;
            } 
            // fall through
          case 173: break;
          case 47: 
            { return DECIMALDIGITS;
            } 
            // fall through
          case 174: break;
          case 48: 
            { return HEXDIGITS;
            } 
            // fall through
          case 175: break;
          case 49: 
            { return BOOL;
            } 
            // fall through
          case 176: break;
          case 50: 
            { return CHAR;
            } 
            // fall through
          case 177: break;
          case 51: 
            { return CALC;
            } 
            // fall through
          case 178: break;
          case 52: 
            { return CASE;
            } 
            // fall through
          case 179: break;
          case 53: 
            { return REAL;
            } 
            // fall through
          case 180: break;
          case 54: 
            { return ISET;
            } 
            // fall through
          case 181: break;
          case 55: 
            { return IMAP;
            } 
            // fall through
          case 182: break;
          case 56: 
            { return NULL;
            } 
            // fall through
          case 183: break;
          case 57: 
            { return THIS;
            } 
            // fall through
          case 184: break;
          case 58: 
            { return THEN;
            } 
            // fall through
          case 185: break;
          case 59: 
            { return TRUE;
            } 
            // fall through
          case 186: break;
          case 60: 
            { return TYPE;
            } 
            // fall through
          case 187: break;
          case 61: 
            { return ELSE;
            } 
            // fall through
          case 188: break;
          case 62: 
            { return FREE;
            } 
            // fall through
          case 189: break;
          case 63: 
            { return BREAK;
            } 
            // fall through
          case 190: break;
          case 64: 
            { return OBJECT_Q;
            } 
            // fall through
          case 191: break;
          case 65: 
            { return LABEL;
            } 
            // fall through
          case 192: break;
          case 66: 
            { return LEMMA;
            } 
            // fall through
          case 193: break;
          case 67: 
            { return CONST;
            } 
            // fall through
          case 194: break;
          case 68: 
            { return CLASSTOKEN;
            } 
            // fall through
          case 195: break;
          case 69: 
            { return READS;
            } 
            // fall through
          case 196: break;
          case 70: 
            { return TRAIT;
            } 
            // fall through
          case 197: break;
          case 71: 
            { return GHOST;
            } 
            // fall through
          case 198: break;
          case 72: 
            { return MATCH;
            } 
            // fall through
          case 199: break;
          case 73: 
            { return PRINT;
            } 
            // fall through
          case 200: break;
          case 74: 
            { return YIELD;
            } 
            // fall through
          case 201: break;
          case 75: 
            { return FALSE;
            } 
            // fall through
          case 202: break;
          case 76: 
            { return FRESH;
            } 
            // fall through
          case 203: break;
          case 77: 
            { return WHILE;
            } 
            // fall through
          case 204: break;
          case 78: 
            { return WHERE;
            } 
            // fall through
          case 205: break;
          case 79: 
            { return OBJECT;
            } 
            // fall through
          case 206: break;
          case 80: 
            { return OPENED;
            } 
            // fall through
          case 207: break;
          case 81: 
            { return ARRAYTOKEN;
            } 
            // fall through
          case 208: break;
          case 82: 
            { return ASSERT;
            } 
            // fall through
          case 209: break;
          case 83: 
            { return ASSUME;
            } 
            // fall through
          case 210: break;
          case 84: 
            { return RETURN;
            } 
            // fall through
          case 211: break;
          case 85: 
            { return REVEAL;
            } 
            // fall through
          case 212: break;
          case 86: 
            { return IMPORT;
            } 
            // fall through
          case 213: break;
          case 87: 
            { return EXISTSTOKEN;
            } 
            // fall through
          case 214: break;
          case 88: 
            { return EXPORT;
            } 
            // fall through
          case 215: break;
          case 89: 
            { return STATIC;
            } 
            // fall through
          case 216: break;
          case 90: 
            { return STRING;
            } 
            // fall through
          case 217: break;
          case 91: 
            { return MODIFY;
            } 
            // fall through
          case 218: break;
          case 92: 
            { return MODULE;
            } 
            // fall through
          case 219: break;
          case 93: 
            { return METHOD;
            } 
            // fall through
          case 220: break;
          case 94: 
            { return YIELDS;
            } 
            // fall through
          case 221: break;
          case 95: 
            { return FORALLTOKEN;
            } 
            // fall through
          case 222: break;
          case 96: 
            { return COLEMMA;
            } 
            // fall through
          case 223: break;
          case 97: 
            { return ARRAYTOKEN_Q;
            } 
            // fall through
          case 224: break;
          case 98: 
            { return RETURNS;
            } 
            // fall through
          case 225: break;
          case 99: 
            { return REVEALS;
            } 
            // fall through
          case 226: break;
          case 100: 
            { return REFINES;
            } 
            // fall through
          case 227: break;
          case 101: 
            { return INCLUDE;
            } 
            // fall through
          case 228: break;
          case 102: 
            { return NEWTYPE;
            } 
            // fall through
          case 229: break;
          case 103: 
            { return ENSURES;
            } 
            // fall through
          case 230: break;
          case 104: 
            { return EXTENDS;
            } 
            // fall through
          case 231: break;
          case 105: 
            { return ORDINAL;
            } 
            // fall through
          case 232: break;
          case 106: 
            { return WITNESS;
            } 
            // fall through
          case 233: break;
          case 107: 
            { return COMETHOD;
            } 
            // fall through
          case 234: break;
          case 108: 
            { return ABSTRACT;
            } 
            // fall through
          case 235: break;
          case 109: 
            { return REQUIRES;
            } 
            // fall through
          case 236: break;
          case 110: 
            { return ITERATOR;
            } 
            // fall through
          case 237: break;
          case 111: 
            { return TWOSTATE;
            } 
            // fall through
          case 238: break;
          case 112: 
            { return MODIFIES;
            } 
            // fall through
          case 239: break;
          case 113: 
            { return MULTISET;
            } 
            // fall through
          case 240: break;
          case 114: 
            { return PARALLEL;
            } 
            // fall through
          case 241: break;
          case 115: 
            { return PROVIDES;
            } 
            // fall through
          case 242: break;
          case 116: 
            { return DATATYPE;
            } 
            // fall through
          case 243: break;
          case 117: 
            { return FUNCTION;
            } 
            // fall through
          case 244: break;
          case 118: 
            { return ALLOCATED;
            } 
            // fall through
          case 245: break;
          case 119: 
            { return INDUCTIVE;
            } 
            // fall through
          case 246: break;
          case 120: 
            { return INVARIANT;
            } 
            // fall through
          case 247: break;
          case 121: 
            { return UNCHANGED;
            } 
            // fall through
          case 248: break;
          case 122: 
            { return PROTECTED;
            } 
            // fall through
          case 249: break;
          case 123: 
            { return PREDICATE;
            } 
            // fall through
          case 250: break;
          case 124: 
            { return DECREASES;
            } 
            // fall through
          case 251: break;
          case 125: 
            { return CODATATYPE;
            } 
            // fall through
          case 252: break;
          case 126: 
            { return CONSTRUCTOR;
            } 
            // fall through
          case 253: break;
          case 127: 
            { return COPREDICATE;
            } 
            // fall through
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
