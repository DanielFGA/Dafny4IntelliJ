/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package DafnyLanguage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static DafnyLanguage.psi.impl.DafnyTypeImpl.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>DafnyLexer.flex</tt>
 */
public class _DafnyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\10\3\1\5\66\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\102\1\2\2\76\1\3\22\0\1\102\1\63\1\70\4\0\1\66\1\60\1\61\1\65\1\0"+
    "\1\36\1\0\1\42\1\0\1\71\11\74\1\35\1\44\1\62\1\40\1\45\1\77\1\73\1\24\2\72"+
    "\1\21\1\103\1\72\2\100\1\22\2\100\1\25\1\100\1\23\1\17\2\100\1\20\10\100\1"+
    "\56\1\67\1\57\1\101\1\75\1\43\1\11\1\4\1\7\1\47\1\16\1\51\1\30\1\10\1\13\1"+
    "\26\1\100\1\6\1\31\1\14\1\5\1\34\1\33\1\12\1\27\1\15\1\32\1\50\1\52\1\53\1"+
    "\46\1\100\1\54\1\37\1\55\7\0\1\1\234\0\1\41\5\0\2\1\66\0\1\64\37\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\20\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\4\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\1\23\1\24"+
    "\1\3\2\1\1\25\1\1\1\25\1\3\1\26\11\3"+
    "\1\27\1\3\1\30\25\3\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\6\3\1\0\1\36\1\0\1\3\5\0"+
    "\1\37\2\0\1\25\1\0\1\3\2\40\17\3\1\41"+
    "\6\3\1\42\13\3\1\43\1\44\2\3\1\45\4\3"+
    "\1\46\2\3\1\47\3\3\1\50\2\51\2\0\1\52"+
    "\1\0\1\53\1\54\1\25\1\37\1\55\7\3\1\56"+
    "\1\57\1\60\2\3\1\61\6\3\1\62\1\63\2\3"+
    "\1\64\1\3\1\65\1\3\1\66\20\3\1\0\1\52"+
    "\1\0\1\53\1\54\1\53\1\67\1\70\1\3\1\71"+
    "\2\3\1\72\2\3\1\73\7\3\1\74\6\3\1\75"+
    "\12\3\2\0\1\76\4\3\1\77\1\100\1\3\1\101"+
    "\3\3\1\102\3\3\1\103\1\3\1\104\1\105\1\3"+
    "\1\106\10\3\2\0\1\107\3\3\1\110\4\3\1\111"+
    "\1\3\1\112\1\113\10\3\1\114\3\3\1\115\2\3"+
    "\1\116\1\117\1\120\1\121\2\3\1\122\2\3\1\123"+
    "\3\3\1\124\1\125\1\126\1\127\1\130\3\3\1\131"+
    "\1\3\1\132\1\133\12\3\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\104\0\104\0\u0550\0\104"+
    "\0\u0594\0\104\0\104\0\104\0\u05d8\0\u061c\0\u0660\0\u06a4"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\u06e8"+
    "\0\104\0\104\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\u08c4\0\u01dc\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\104\0\104\0\104\0\104\0\104"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\104\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u07b4\0\u1540"+
    "\0\104\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u01dc\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8"+
    "\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u01dc"+
    "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u01dc\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u01dc\0\u01dc\0\u1f9c\0\u1fe0\0\u01dc\0\u2024"+
    "\0\u2068\0\u20ac\0\u20f0\0\104\0\u2134\0\u2178\0\u01dc\0\u21bc"+
    "\0\u2200\0\u2244\0\104\0\104\0\u0ae4\0\u2288\0\u22cc\0\104"+
    "\0\u2310\0\u2354\0\u2398\0\u23dc\0\u083c\0\u01dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u25fc\0\u2640\0\u01dc\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u01dc\0\u01dc\0\u281c\0\u2860\0\u01dc\0\u28a4\0\u01dc"+
    "\0\u28e8\0\u01dc\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u14b8\0\u2db0\0\u2df4\0\u2e38\0\u1584"+
    "\0\u2e7c\0\u01dc\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u01dc\0\u2fd0"+
    "\0\u3014\0\u01dc\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac"+
    "\0\u31f0\0\u01dc\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388"+
    "\0\u01dc\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u01dc\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u0ae4\0\u3850\0\u01dc\0\u3894\0\u38d8"+
    "\0\u391c\0\u01dc\0\u3960\0\u39a4\0\u39e8\0\u01dc\0\u3a2c\0\u01dc"+
    "\0\u01dc\0\u3a70\0\u01dc\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u01dc\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u0ae4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u01dc\0\u3f38"+
    "\0\u01dc\0\u01dc\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0"+
    "\0\u4114\0\u4158\0\u01dc\0\u419c\0\u41e0\0\u4224\0\u01dc\0\u4268"+
    "\0\u42ac\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u42f0\0\u4334\0\u01dc"+
    "\0\u4378\0\u43bc\0\u01dc\0\u4400\0\u4444\0\u4488\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u44cc\0\u4510\0\u4554\0\u01dc\0\u4598"+
    "\0\u01dc\0\u01dc\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730"+
    "\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u01dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\7\10\1\20"+
    "\1\21\1\22\2\10\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\10\1\35\1\36"+
    "\1\37\1\40\1\10\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\10\1\57\1\60\1\2\1\3\2\10\1\2"+
    "\1\3\1\10\106\0\2\3\72\0\1\3\3\0\1\3"+
    "\5\0\1\10\1\61\27\10\6\0\1\10\2\0\1\62"+
    "\1\10\1\63\3\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\1\64\30\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\65\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\1\10"+
    "\1\66\1\67\1\10\1\70\1\71\23\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\31\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\6\72\1\73\14\72\1\74\5\72\11\0\6\72"+
    "\15\0\2\72\1\0\2\72\1\0\2\72\2\0\1\72"+
    "\4\0\12\10\1\75\16\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\10\10\1\76\1\77"+
    "\11\10\1\100\1\10\1\101\3\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\5\10\1\102"+
    "\4\10\1\103\16\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\4\10\1\104\1\10\1\105"+
    "\22\10\6\0\1\10\2\0\1\106\3\10\1\107\1\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\2\10\1\110\5\10"+
    "\1\111\20\10\6\0\1\10\2\0\5\10\1\112\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\14\10\1\113\14\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\11\10\1\114\1\115\16\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\4\10\1\116\24\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\1\10\1\117\3\10\1\120\4\10\1\121\13\10"+
    "\1\122\2\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\6\10\1\123\22\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\35\0\1\124"+
    "\1\0\1\125\1\126\103\0\1\127\4\0\1\130\100\0"+
    "\1\131\45\0\5\10\1\132\4\10\1\133\16\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\5\10\1\134\4\10\1\135\16\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\26\10\1\136"+
    "\2\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\7\10\1\137\21\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\13\0\1\140\24\0"+
    "\1\141\43\0\2\142\2\0\31\143\11\142\6\143\4\142"+
    "\2\0\5\142\1\144\1\142\2\143\1\142\2\143\1\142"+
    "\2\143\2\142\1\143\65\0\1\145\1\0\1\146\14\0"+
    "\2\147\2\0\63\147\1\150\1\151\13\147\1\152\3\0"+
    "\47\152\1\153\15\152\1\154\2\152\2\154\1\0\5\152"+
    "\70\0\1\155\13\0\1\152\3\0\65\152\1\154\2\152"+
    "\2\154\1\0\5\152\4\0\1\10\1\156\27\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\31\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\1\157\1\10\1\0\1\160\1\10\1\0"+
    "\3\10\1\0\1\10\4\0\22\10\1\161\6\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\25\10\1\162\3\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\2\10\1\163\5\10\1\164"+
    "\17\10\1\165\6\0\1\10\2\0\1\10\1\166\4\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\5\10\1\167\23\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\5\10\1\170\23\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\2\10\1\171\20\10"+
    "\1\172\5\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\31\72\11\0\6\72\15\0\2\72"+
    "\1\0\2\72\1\0\2\72\2\0\1\72\4\0\6\72"+
    "\1\173\22\72\11\0\6\72\15\0\2\72\1\0\2\72"+
    "\1\0\2\72\2\0\1\72\4\0\23\72\1\174\5\72"+
    "\11\0\6\72\15\0\2\72\1\0\2\72\1\0\2\72"+
    "\2\0\1\72\4\0\5\10\1\175\21\10\1\176\1\10"+
    "\6\0\1\10\2\0\2\10\1\177\3\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\11\10\1\200\17\10\6\0\1\10"+
    "\2\0\1\10\1\201\1\202\3\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\12\10\1\203\16\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\12\10\1\204"+
    "\16\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\5\10\1\205\22\10\1\206\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\207\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\31\10\6\0\1\10\2\0\4\10"+
    "\1\210\1\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\12\10"+
    "\1\211\16\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\5\10\1\212\23\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\30\10"+
    "\1\213\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\1\10\1\214\27\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\23\10\1\215"+
    "\5\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\23\10\1\216\5\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\30\10\1\217"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\15\10\1\220\13\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\5\10\1\221\1\222"+
    "\22\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\11\10\1\223\15\10\1\224\1\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\1\10\1\225\27\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\31\10\6\0\1\10\2\0"+
    "\1\10\1\226\4\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\30\10\1\227\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\11\10\1\230\17\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\2\10"+
    "\1\231\26\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\1\10\1\232\10\10\1\233\16\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\42\0\1\234\45\0\11\10\1\235\17\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\3\10"+
    "\1\236\25\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\6\10\1\237\22\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\6\10"+
    "\1\240\22\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\10\10\1\241\20\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\242\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\14\0\1\243\155\0\1\244\21\0\31\72"+
    "\11\0\6\72\12\0\1\245\2\0\2\72\1\0\2\72"+
    "\1\0\2\72\2\0\1\72\12\0\1\142\1\0\2\142"+
    "\14\0\1\246\34\0\3\142\12\0\65\145\1\247\16\145"+
    "\1\146\1\0\1\250\1\0\72\146\1\0\5\146\12\0"+
    "\1\147\1\0\2\147\14\0\1\251\34\0\3\147\103\0"+
    "\1\252\2\0\1\252\13\0\1\253\2\0\1\253\1\0"+
    "\1\253\4\0\1\253\2\0\1\253\2\0\1\253\22\0"+
    "\1\253\1\0\1\253\17\0\2\253\1\0\1\253\6\0"+
    "\1\253\1\152\3\0\65\152\1\254\2\152\1\254\1\152"+
    "\1\0\5\152\70\155\1\255\13\155\4\0\2\10\1\256"+
    "\26\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\31\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\1\160\1\10\1\0\1\160"+
    "\1\10\1\0\3\10\1\0\1\10\4\0\12\10\1\257"+
    "\16\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\25\10\1\260\3\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\12\10\1\261"+
    "\16\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\23\10\1\262\5\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\6\10\1\263"+
    "\22\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\5\10\1\264\23\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\23\10\1\265"+
    "\5\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\6\10\1\266\22\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\3\10\1\267"+
    "\25\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\12\10\1\270\16\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\5\72\1\271"+
    "\23\72\11\0\6\72\15\0\2\72\1\0\2\72\1\0"+
    "\2\72\2\0\1\72\4\0\26\72\1\272\2\72\11\0"+
    "\6\72\15\0\2\72\1\0\2\72\1\0\2\72\2\0"+
    "\1\72\4\0\2\10\1\273\26\10\6\0\1\10\2\0"+
    "\1\10\1\274\4\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\26\10\1\275\2\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\12\10\1\276\16\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\26\10\1\277\2\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\5\10\1\300\23\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\6\10\1\301\22\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\11\10\1\302\17\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\30\10\1\303\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\1\10\1\304\27\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\305\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\10\10\1\306\20\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\7\10"+
    "\1\307\21\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\310\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\23\10"+
    "\1\311\5\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\312\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\26\10"+
    "\1\313\2\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\1\10\1\314\27\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\16\10"+
    "\1\315\12\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\11\10\1\316\17\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\7\10"+
    "\1\317\21\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\23\10\1\320\5\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\7\10"+
    "\1\321\21\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\4\10\1\322\24\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\323\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\11\10\1\324\17\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\31\10"+
    "\6\0\1\10\2\0\1\10\1\325\4\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\5\10\1\326\23\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\6\10"+
    "\1\327\22\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\11\10\1\330\17\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\3\10"+
    "\1\331\25\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\10\10\1\332\20\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\1\333"+
    "\2\0\1\333\1\0\1\333\4\0\1\333\2\0\1\333"+
    "\2\0\1\333\22\0\1\333\1\0\1\333\17\0\2\333"+
    "\1\0\1\333\6\0\1\333\65\145\1\247\1\145\1\334"+
    "\14\145\4\0\1\335\2\0\1\335\1\0\1\335\4\0"+
    "\1\335\2\0\1\335\2\0\1\335\22\0\1\335\1\0"+
    "\1\335\17\0\2\335\1\0\1\335\6\0\1\335\71\0"+
    "\1\336\2\0\2\336\12\0\1\337\2\0\1\337\1\0"+
    "\1\337\4\0\1\337\2\0\1\337\2\0\1\337\22\0"+
    "\1\337\1\0\1\337\17\0\2\337\1\0\2\337\5\0"+
    "\1\337\1\152\3\0\65\152\1\254\2\152\1\254\1\340"+
    "\1\0\5\152\4\0\3\10\1\341\25\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\5\10"+
    "\1\342\23\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\25\10\1\343\3\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\344\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\345\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\346\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\23\10\1\347\5\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\31\72"+
    "\11\0\1\350\5\72\15\0\2\72\1\0\2\72\1\0"+
    "\2\72\2\0\1\72\4\0\25\72\1\351\3\72\11\0"+
    "\6\72\15\0\2\72\1\0\2\72\1\0\2\72\2\0"+
    "\1\72\4\0\23\10\1\352\5\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\7\10\1\353"+
    "\21\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\5\10\1\354\23\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\3\10\1\355"+
    "\25\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\6\10\1\356\22\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\5\10\1\357"+
    "\23\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\6\10\1\360\22\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\31\10\6\0"+
    "\1\10\2\0\1\361\5\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\11\10\1\362\17\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\11\10\1\363\17\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\6\10\1\364\22\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\6\10\1\365\22\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\17\10\1\366\11\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\7\10\1\367\21\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\10\10\1\370\20\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\11\10\1\371\17\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\31\10\6\0\1\10\2\0\3\10\1\372\2\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\1\10\1\373\27\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\7\10\1\374\21\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\12\10\1\375\16\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\7\10\1\376\21\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\11\10\1\377\17\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\12\10\1\u0100\16\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\7\10\1\u0101\21\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\11\10\1\u0102\17\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\12\10\1\u0103\16\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\1\u0104\2\0\1\u0104\1\0\1\u0104\4\0\1\u0104"+
    "\2\0\1\u0104\2\0\1\u0104\22\0\1\u0104\1\0\1\u0104"+
    "\17\0\2\u0104\1\0\1\u0104\6\0\1\u0104\4\0\1\u0105"+
    "\2\0\1\u0105\1\0\1\u0105\4\0\1\u0105\2\0\1\u0105"+
    "\2\0\1\u0105\22\0\1\u0105\1\0\1\u0105\17\0\2\u0105"+
    "\1\0\1\u0105\6\0\1\u0105\71\0\1\336\2\0\1\336"+
    "\13\0\1\337\2\0\1\337\1\0\1\337\4\0\1\337"+
    "\2\0\1\337\2\0\1\337\22\0\1\337\1\0\1\337"+
    "\17\0\2\337\1\0\1\337\6\0\1\337\4\0\11\10"+
    "\1\u0106\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\25\10\1\u0107\3\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\6\10"+
    "\1\u0108\22\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\31\10\6\0\1\10\2\0\1\10"+
    "\1\u0109\4\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\5\10"+
    "\1\u010a\23\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\31\72\11\0\6\72\15\0\2\72"+
    "\1\0\1\u010b\1\72\1\0\2\72\2\0\1\72\4\0"+
    "\12\72\1\u010c\16\72\11\0\6\72\15\0\2\72\1\0"+
    "\2\72\1\0\2\72\2\0\1\72\4\0\6\10\1\u010d"+
    "\22\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\2\10\1\u010e\26\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\11\10\1\u010f"+
    "\17\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\7\10\1\u0110\21\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\11\10\1\u0111"+
    "\17\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\11\10\1\u0112\17\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\30\10\1\u0113"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\5\10\1\u0114\23\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\12\10\1\u0115\16\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\11\10\1\u0116\17\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\20\10\1\u0117\10\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\3\10\1\u0118\25\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\24\10\1\u0119\4\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\7\10\1\u011a\21\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\31\10\6\0\1\10"+
    "\2\0\1\10\1\u011b\4\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\23\10\1\u011c\5\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\3\10\1\u011d\25\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\3\10\1\u011e\25\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\31\10\6\0\1\10"+
    "\2\0\1\u011f\5\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\5\10\1\u0120\23\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\3\10\1\u0121\25\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\7\10\1\u0122\21\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\23\10\1\u0123\5\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\1\u0124\2\0\1\u0124\1\0\1\u0124\4\0\1\u0124\2\0"+
    "\1\u0124\2\0\1\u0124\22\0\1\u0124\1\0\1\u0124\17\0"+
    "\2\u0124\1\0\1\u0124\6\0\1\u0124\4\0\1\u0125\2\0"+
    "\1\u0125\1\0\1\u0125\4\0\1\u0125\2\0\1\u0125\2\0"+
    "\1\u0125\22\0\1\u0125\1\0\1\u0125\17\0\2\u0125\1\0"+
    "\1\u0125\6\0\1\u0125\4\0\5\10\1\u0126\23\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\26\10\1\u0127\2\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\7\10\1\u0128\21\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\11\10\1\u0129\17\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\31\72\11\0\6\72\15\0"+
    "\1\u010b\1\72\1\0\1\u010b\1\72\1\0\1\u012a\1\72"+
    "\2\0\1\72\4\0\12\10\1\u012b\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\7\10"+
    "\1\u012c\21\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\5\10\1\u012d\23\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\1\10"+
    "\1\u012e\27\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\u012f\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\u0130\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\23\10\1\u0131\5\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\21\10"+
    "\1\u0132\7\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\u0133\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\12\10"+
    "\1\u0134\16\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\11\10\1\u0135\17\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\5\10"+
    "\1\u0136\23\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\30\10\1\u0137\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\23\10\1\u0138"+
    "\5\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\5\10\1\u0139\23\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\1\10\1\u013a"+
    "\27\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\23\10\1\u013b\5\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\1\142\2\0"+
    "\1\142\1\0\1\142\4\0\1\142\2\0\1\142\2\0"+
    "\1\142\22\0\1\142\1\0\1\142\17\0\2\142\1\0"+
    "\1\142\6\0\1\142\4\0\1\147\2\0\1\147\1\0"+
    "\1\147\4\0\1\147\2\0\1\147\2\0\1\147\22\0"+
    "\1\147\1\0\1\147\17\0\2\147\1\0\1\147\6\0"+
    "\1\147\4\0\3\10\1\u013c\25\10\6\0\1\10\2\0"+
    "\6\10\2\0\2\10\7\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\4\0\3\10\1\u013d"+
    "\25\10\6\0\1\10\2\0\6\10\2\0\2\10\7\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\4\0\31\10\6\0\1\10\2\0\1\u013e\5\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\23\10\1\u013f\5\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\31\10\6\0\1\10\2\0\2\10\1\u0140\3\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\10\10\1\u0141\20\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\6\10\1\u0142\22\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\12\10\1\u0143\16\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\23\10\1\u0144\5\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\11\10\1\u0145\17\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\12\10\1\u0146\16\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\11\10\1\u0147\17\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\12\10\1\u0148\16\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\12\10\1\u0149\16\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\2\10\1\u014a\26\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\10\10\1\u014b\20\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\11\10\1\u014c\17\10\6\0\1\10\2\0\6\10"+
    "\2\0\2\10\7\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\4\0\5\10\1\u014d\23\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\4\0\30\10\1\u014e\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\12\10\1\u014f\16\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\11\10\1\u0150\17\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\31\10\6\0\1\10\2\0"+
    "\1\10\1\u0151\4\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\12\10\1\u0152\16\10\6\0\1\10\2\0\6\10\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\23\10\1\u0153\5\10\6\0"+
    "\1\10\2\0\6\10\2\0\2\10\7\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\4\0"+
    "\1\u0154\30\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\1\10\1\u0155\27\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\11\10"+
    "\1\u0156\17\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\u0157\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\5\10"+
    "\1\u0158\23\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\6\10\1\u0159\22\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\12\10"+
    "\1\u015a\16\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\6\10\1\u015b\22\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\31\10"+
    "\6\0\1\10\2\0\6\10\2\0\2\10\7\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\u015c"+
    "\4\0\31\10\6\0\1\10\2\0\5\10\1\u015d\2\0"+
    "\2\10\7\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\4\0\30\10\1\u015e\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\6\10"+
    "\1\u015f\22\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\12\10\1\u0160\16\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\23\10"+
    "\1\u0161\5\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\23\10\1\u0162\5\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\7\10"+
    "\1\u0163\21\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\4\0\1\10\1\u0164\27\10\6\0\1\10"+
    "\2\0\6\10\2\0\2\10\7\0\1\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\4\0\10\10"+
    "\1\u0165\20\10\6\0\1\10\2\0\6\10\2\0\2\10"+
    "\7\0\1\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18564];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\2\11\1\1\1\11\1\1\3\11"+
    "\4\1\7\11\1\1\2\11\51\1\5\11\1\0\6\1"+
    "\1\0\1\11\1\0\1\1\5\0\1\11\2\0\1\1"+
    "\1\0\56\1\1\11\6\1\2\11\1\1\2\0\1\11"+
    "\1\0\61\1\1\0\1\1\1\0\46\1\2\0\36\1"+
    "\2\0\100\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _DafnyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DafnyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case YYINITIAL: {
              return EOF;
            }  // fall though
            case 358: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 93: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 94: break;
          case 3: 
            { return IDENTDEF;
            } 
            // fall through
          case 95: break;
          case 4: 
            { return COLON;
            } 
            // fall through
          case 96: break;
          case 5: 
            { return COMMA;
            } 
            // fall through
          case 97: break;
          case 6: 
            { return VERTICALBAR;
            } 
            // fall through
          case 98: break;
          case 7: 
            { return BULLET;
            } 
            // fall through
          case 99: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 100: break;
          case 9: 
            { return BACKTICK;
            } 
            // fall through
          case 101: break;
          case 10: 
            { return SEMI;
            } 
            // fall through
          case 102: break;
          case 11: 
            { return CLOSEANGLEBRACKET;
            } 
            // fall through
          case 103: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 104: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 105: break;
          case 14: 
            { return LBRACKET;
            } 
            // fall through
          case 106: break;
          case 15: 
            { return RBRACKET;
            } 
            // fall through
          case 107: break;
          case 16: 
            { return OPENPAREN;
            } 
            // fall through
          case 108: break;
          case 17: 
            { return CLOSEPAREN;
            } 
            // fall through
          case 109: break;
          case 18: 
            { return OPENANGLEBRACKET;
            } 
            // fall through
          case 110: break;
          case 19: 
            { return NEQALT;
            } 
            // fall through
          case 111: break;
          case 20: 
            { return STAR;
            } 
            // fall through
          case 112: break;
          case 21: 
            { return DIGITS;
            } 
            // fall through
          case 113: break;
          case 22: 
            { return BY;
            } 
            // fall through
          case 114: break;
          case 23: 
            { return AS;
            } 
            // fall through
          case 115: break;
          case 24: 
            { return IN;
            } 
            // fall through
          case 116: break;
          case 25: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 117: break;
          case 26: 
            { return BOREDSMILEY;
            } 
            // fall through
          case 118: break;
          case 27: 
            { return GETS;
            } 
            // fall through
          case 119: break;
          case 28: 
            { return EQ;
            } 
            // fall through
          case 120: break;
          case 29: 
            { return DARROW;
            } 
            // fall through
          case 121: break;
          case 30: 
            { return NEQ;
            } 
            // fall through
          case 122: break;
          case 31: 
            { return STRINGTOKEN;
            } 
            // fall through
          case 123: break;
          case 32: 
            { return BVTOKEN;
            } 
            // fall through
          case 124: break;
          case 33: 
            { return INT;
            } 
            // fall through
          case 125: break;
          case 34: 
            { return NATTOKEN;
            } 
            // fall through
          case 126: break;
          case 35: 
            { return SET;
            } 
            // fall through
          case 127: break;
          case 36: 
            { return SEQ;
            } 
            // fall through
          case 128: break;
          case 37: 
            { return MAP;
            } 
            // fall through
          case 129: break;
          case 38: 
            { return ELLIPSIS;
            } 
            // fall through
          case 130: break;
          case 39: 
            { return VAR;
            } 
            // fall through
          case 131: break;
          case 40: 
            { return NOTIN;
            } 
            // fall through
          case 132: break;
          case 41: 
            { return CHARTOKEN;
            } 
            // fall through
          case 133: break;
          case 42: 
            { return COMMENT;
            } 
            // fall through
          case 134: break;
          case 43: 
            { return DECIMALDIGITS;
            } 
            // fall through
          case 135: break;
          case 44: 
            { return HEXDIGITS;
            } 
            // fall through
          case 136: break;
          case 45: 
            { return BOOL;
            } 
            // fall through
          case 137: break;
          case 46: 
            { return CHAR;
            } 
            // fall through
          case 138: break;
          case 47: 
            { return CALC;
            } 
            // fall through
          case 139: break;
          case 48: 
            { return CASE;
            } 
            // fall through
          case 140: break;
          case 49: 
            { return REAL;
            } 
            // fall through
          case 141: break;
          case 50: 
            { return ISET;
            } 
            // fall through
          case 142: break;
          case 51: 
            { return IMAP;
            } 
            // fall through
          case 143: break;
          case 52: 
            { return THEN;
            } 
            // fall through
          case 144: break;
          case 53: 
            { return TYPE;
            } 
            // fall through
          case 145: break;
          case 54: 
            { return ELSE;
            } 
            // fall through
          case 146: break;
          case 55: 
            { return OBJECT_Q;
            } 
            // fall through
          case 147: break;
          case 56: 
            { return LEMMA;
            } 
            // fall through
          case 148: break;
          case 57: 
            { return CONST;
            } 
            // fall through
          case 149: break;
          case 58: 
            { return CLASSTOKEN;
            } 
            // fall through
          case 150: break;
          case 59: 
            { return READS;
            } 
            // fall through
          case 151: break;
          case 60: 
            { return TRAIT;
            } 
            // fall through
          case 152: break;
          case 61: 
            { return GHOST;
            } 
            // fall through
          case 153: break;
          case 62: 
            { return OBJECT;
            } 
            // fall through
          case 154: break;
          case 63: 
            { return ARRAYTOKEN;
            } 
            // fall through
          case 155: break;
          case 64: 
            { return ASSUME;
            } 
            // fall through
          case 156: break;
          case 65: 
            { return REVEAL;
            } 
            // fall through
          case 157: break;
          case 66: 
            { return IMPORT;
            } 
            // fall through
          case 158: break;
          case 67: 
            { return EXPORT;
            } 
            // fall through
          case 159: break;
          case 68: 
            { return STATIC;
            } 
            // fall through
          case 160: break;
          case 69: 
            { return STRING;
            } 
            // fall through
          case 161: break;
          case 70: 
            { return METHOD;
            } 
            // fall through
          case 162: break;
          case 71: 
            { return COLEMMA;
            } 
            // fall through
          case 163: break;
          case 72: 
            { return ARRAYTOKEN_Q;
            } 
            // fall through
          case 164: break;
          case 73: 
            { return NEWTYPE;
            } 
            // fall through
          case 165: break;
          case 74: 
            { return ENSURES;
            } 
            // fall through
          case 166: break;
          case 75: 
            { return ORDINAL;
            } 
            // fall through
          case 167: break;
          case 76: 
            { return WITNESS;
            } 
            // fall through
          case 168: break;
          case 77: 
            { return REQUIRES;
            } 
            // fall through
          case 169: break;
          case 78: 
            { return ITERATOR;
            } 
            // fall through
          case 170: break;
          case 79: 
            { return TWOSTATE;
            } 
            // fall through
          case 171: break;
          case 80: 
            { return MODIFIES;
            } 
            // fall through
          case 172: break;
          case 81: 
            { return MULTISET;
            } 
            // fall through
          case 173: break;
          case 82: 
            { return DATATYPE;
            } 
            // fall through
          case 174: break;
          case 83: 
            { return FUNCTION;
            } 
            // fall through
          case 175: break;
          case 84: 
            { return INDUCTIVE;
            } 
            // fall through
          case 176: break;
          case 85: 
            { return INVARIANT;
            } 
            // fall through
          case 177: break;
          case 86: 
            { return PROTECTED;
            } 
            // fall through
          case 178: break;
          case 87: 
            { return PREDICATE;
            } 
            // fall through
          case 179: break;
          case 88: 
            { return DECREASES;
            } 
            // fall through
          case 180: break;
          case 89: 
            { return CODATATYPE;
            } 
            // fall through
          case 181: break;
          case 90: 
            { return CONSTRUCTOR;
            } 
            // fall through
          case 182: break;
          case 91: 
            { return COPREDICATE;
            } 
            // fall through
          case 183: break;
          case 92: 
            { return VERTICALBAREXPRESSION;
            } 
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
