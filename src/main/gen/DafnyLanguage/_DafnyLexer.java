/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package DafnyLanguage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static DafnyLanguage.psi.impl.DafnyTypeImpl.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_DafnyLexer.flex</tt>
 */
public class _DafnyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\10\3\1\5\66\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\105\1\2\2\101\1\2\22\0\1\105\1\65\1\73\3\0\1\56\1\71\1\63\1\64\1\67"+
    "\1\54\1\35\1\55\1\41\1\104\1\74\11\77\1\34\1\43\1\70\1\37\1\44\1\102\1\76"+
    "\1\23\2\75\1\20\2\75\2\103\1\21\2\103\1\24\1\103\1\22\1\16\2\103\1\17\10\103"+
    "\1\61\1\72\1\62\1\0\1\100\1\42\1\10\1\3\1\6\1\46\1\15\1\50\1\27\1\7\1\12\1"+
    "\25\1\53\1\5\1\30\1\13\1\4\1\33\1\32\1\11\1\26\1\14\1\31\1\47\1\51\1\52\1"+
    "\45\1\103\1\57\1\36\1\60\7\0\1\1\234\0\1\40\5\0\2\1\66\0\1\66\37\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\21\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\5\3\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\1"+
    "\1\25\1\26\1\27\1\3\1\1\1\30\1\1\1\30"+
    "\1\1\2\3\1\31\15\3\1\32\1\3\1\33\3\3"+
    "\1\34\25\3\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\12\3\1\44\1\0\1\45\1\0\1\3\3\0"+
    "\1\46\2\0\1\30\2\0\1\47\2\3\2\50\1\3"+
    "\1\51\26\3\1\52\6\3\1\53\1\54\17\3\1\55"+
    "\1\56\3\3\1\57\7\3\1\60\3\3\1\61\7\3"+
    "\1\62\2\63\2\0\1\64\1\65\1\30\1\46\1\0"+
    "\1\66\13\3\1\67\1\70\1\71\5\3\1\72\11\3"+
    "\1\73\1\74\2\3\1\75\1\76\1\77\1\3\1\100"+
    "\1\101\1\3\1\102\30\3\1\103\5\3\2\0\1\64"+
    "\1\65\1\64\1\47\1\104\1\105\1\3\1\106\1\107"+
    "\1\3\1\110\3\3\1\111\5\3\1\112\12\3\1\113"+
    "\10\3\1\114\2\3\1\115\6\3\1\116\1\3\1\117"+
    "\3\3\1\120\1\121\1\3\1\122\1\123\1\3\2\0"+
    "\1\124\1\125\7\3\1\126\1\127\1\130\1\131\1\3"+
    "\1\132\5\3\1\133\3\3\1\134\1\3\1\135\1\3"+
    "\1\136\1\137\1\3\1\140\1\141\1\142\6\3\1\143"+
    "\2\3\1\144\2\3\2\0\1\145\6\3\1\146\1\147"+
    "\1\3\1\150\1\151\1\152\3\3\1\153\1\3\1\154"+
    "\1\155\1\156\12\3\1\157\1\3\1\160\2\3\1\161"+
    "\1\3\1\162\2\3\1\163\1\164\1\165\1\166\1\3"+
    "\1\167\1\3\1\170\1\3\1\171\1\3\1\172\3\3"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\1\201\2\3"+
    "\1\202\1\203\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\106\0\u05be\0\u0604"+
    "\0\106\0\u064a\0\106\0\106\0\106\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\106\0\106\0\u07ee\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\u0834\0\106\0\106\0\106\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u01ea"+
    "\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94"+
    "\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u01ea\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de"+
    "\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e"+
    "\0\u1554\0\106\0\106\0\106\0\106\0\106\0\106\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\106\0\u189c\0\106\0\u18e2\0\u1928\0\u196e"+
    "\0\u08c0\0\u19b4\0\106\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u01ea\0\u1c2a\0\u1c70\0\u01ea\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6"+
    "\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116"+
    "\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u01ea\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u01ea\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u01ea\0\u01ea\0\u28be"+
    "\0\u2904\0\u294a\0\u01ea\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\u2b34\0\106\0\u2b7a\0\u2bc0\0\u2c06\0\u01ea\0\u2c4c"+
    "\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\106\0\106"+
    "\0\u01ea\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u094c\0\u2f94"+
    "\0\u01ea\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u01ea\0\u01ea\0\u01ea\0\u32dc"+
    "\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u01ea\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u01ea\0\u01ea"+
    "\0\u36b0\0\u36f6\0\u01ea\0\u01ea\0\u01ea\0\u373c\0\u01ea\0\u01ea"+
    "\0\u3782\0\u01ea\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u3dcc\0\u3e12\0\u01ea\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u19fa\0\106\0\u01ea\0\u40ce"+
    "\0\u4114\0\u01ea\0\u01ea\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272"+
    "\0\u01ea\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u01ea\0\u4416"+
    "\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646"+
    "\0\u468c\0\u01ea\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830"+
    "\0\u4876\0\u48bc\0\u01ea\0\u4902\0\u4948\0\u01ea\0\u498e\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u01ea\0\u4b32\0\u4b78\0\u4bbe"+
    "\0\u4c04\0\u4c4a\0\u01ea\0\u01ea\0\u4c90\0\u01ea\0\u01ea\0\u4cd6"+
    "\0\u4d1c\0\u4d62\0\u01ea\0\u01ea\0\u4da8\0\u4dee\0\u4e34\0\u4e7a"+
    "\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u01ea\0\u01ea\0\u4fd8\0\u501e"+
    "\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u01ea\0\u5208"+
    "\0\u524e\0\u5294\0\u01ea\0\u52da\0\u01ea\0\u5320\0\u01ea\0\u01ea"+
    "\0\u5366\0\u01ea\0\u01ea\0\u01ea\0\u53ac\0\u53f2\0\u5438\0\u547e"+
    "\0\u54c4\0\u550a\0\u01ea\0\u5550\0\u5596\0\u01ea\0\u55dc\0\u5622"+
    "\0\u5668\0\u56ae\0\u01ea\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c"+
    "\0\u5852\0\u01ea\0\u01ea\0\u5898\0\u01ea\0\u01ea\0\u01ea\0\u58de"+
    "\0\u5924\0\u596a\0\u01ea\0\u59b0\0\u01ea\0\u01ea\0\u01ea\0\u59f6"+
    "\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26"+
    "\0\u5c6c\0\u01ea\0\u5cb2\0\u01ea\0\u5cf8\0\u5d3e\0\u01ea\0\u5d84"+
    "\0\u01ea\0\u5dca\0\u5e10\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u5e56"+
    "\0\u01ea\0\u5e9c\0\u01ea\0\u5ee2\0\u01ea\0\u5f28\0\u01ea\0\u5f6e"+
    "\0\u5fb4\0\u5ffa\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u6040\0\u6086\0\u01ea\0\u01ea\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\7\10\1\20"+
    "\1\21\1\22\1\23\1\10\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\10\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\2\1\61\1\62\1\10\1\63\1\64"+
    "\1\2\1\3\2\10\1\65\1\3\110\0\1\3\76\0"+
    "\1\3\3\0\1\3\3\0\1\10\1\66\4\10\1\67"+
    "\22\10\11\0\1\70\1\10\1\71\4\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\1\72\1\10\1\73"+
    "\25\10\1\74\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\5\10\1\75\4\10\1\76\16\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\1\10\1\77\1\100\1\10\1\101\1\102\23\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\31\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\1\103\1\10\1\104\3\10\1\105"+
    "\14\10\1\106\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\107\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\10\10\1\110\1\111\11\10\1\112\1\10\1\113\3\10"+
    "\11\0\3\10\1\114\3\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\5\10\1\115\4\10\1\116\13\10"+
    "\1\117\2\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\4\10\1\120\1\10\1\121\22\10"+
    "\11\0\1\122\3\10\1\123\2\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\2\10\1\124\5\10\1\125"+
    "\20\10\11\0\5\10\1\126\1\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\14\10\1\127\14\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\11\10\1\130\1\131\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\4\10\1\132\24\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\1\10\1\133\3\10\1\134\4\10\1\135\13\10"+
    "\1\136\2\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\10\10\1\137\20\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\5\10"+
    "\1\140\1\141\22\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\36\0\1\142\1\0\1\143\1\144"+
    "\104\0\1\145\106\0\1\146\4\0\1\147\102\0\1\150"+
    "\47\0\7\10\1\151\21\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\5\10\1\152\4\10"+
    "\1\153\16\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\5\10\1\154\23\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\1\10"+
    "\1\155\3\10\1\156\1\157\17\10\1\160\2\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\4\10\1\161\2\10\1\162\21\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\60\0\1\163\41\0"+
    "\1\164\24\0\1\165\46\0\2\166\1\0\31\167\11\166"+
    "\7\167\7\166\2\0\5\166\1\170\1\166\2\167\1\166"+
    "\2\167\1\166\2\167\2\166\2\171\1\0\67\171\1\172"+
    "\1\173\12\171\1\174\2\0\47\174\1\175\21\174\1\176"+
    "\2\174\2\176\1\0\4\174\73\0\1\177\12\0\1\174"+
    "\2\0\71\174\1\176\2\174\2\176\1\0\4\174\67\0"+
    "\1\200\14\0\1\201\4\0\1\10\1\202\27\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\203\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\31\10\11\0\7\10\20\0"+
    "\1\204\1\10\1\0\1\205\1\10\1\0\2\10\5\0"+
    "\22\10\1\206\6\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\31\10\11\0\1\10\1\207"+
    "\5\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\210\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\1\211\30\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\25\10"+
    "\1\212\3\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\2\10\1\213\5\10\1\214\14\10"+
    "\1\215\2\10\1\216\11\0\1\10\1\217\5\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\5\10\1\220"+
    "\23\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\5\10\1\221\23\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\2\10\1\222"+
    "\20\10\1\223\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\23\10\1\224\5\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\2\10\1\225\26\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\6\10\1\226\22\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\227\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\5\10\1\230\3\10\1\231"+
    "\15\10\1\232\1\10\11\0\2\10\1\233\1\234\3\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\3\10"+
    "\1\235\5\10\1\236\17\10\11\0\1\10\1\237\1\240"+
    "\4\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\241\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\242\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\5\10\1\243\22\10\1\244\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\245\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\31\10\11\0\4\10\1\246\2\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\2\10\1\247\26\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\7\10\1\250\2\10\1\251\16\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\5\10"+
    "\1\252\20\10\1\253\2\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\30\10\1\254\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\1\10\1\255\27\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\23\10\1\256\5\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\257\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\7\10\1\260\1\10\1\261"+
    "\16\10\1\262\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\15\10\1\263\13\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\5\10"+
    "\1\264\1\265\22\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\11\10\1\266\15\10\1\267"+
    "\1\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\1\10\1\270\27\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\31\10\11\0"+
    "\1\10\1\271\5\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\11\10\1\272\16\10\1\273\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\11\10"+
    "\1\274\17\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\2\10\1\275\26\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\3\10"+
    "\1\276\25\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\6\10\1\277\22\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\1\10"+
    "\1\300\5\10\1\301\2\10\1\302\16\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\43\0\1\303"+
    "\47\0\12\10\1\304\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\305\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\3\10\1\306\25\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\6\10\1\307\22\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\6\10\1\310\22\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\2\10\1\311\26\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\12\10\1\312\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\10\10\1\313\20\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\7\10\1\314\2\10\1\315\16\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\11\10"+
    "\1\316\17\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\15\0\1\317\163\0\1\320\17\0\31\10"+
    "\11\0\7\10\15\0\1\321\2\0\2\10\1\0\2\10"+
    "\1\0\2\10\13\0\1\166\1\0\2\166\14\0\1\322"+
    "\40\0\3\166\22\0\1\171\1\0\2\171\14\0\1\323"+
    "\40\0\3\171\105\0\1\324\2\0\1\324\11\0\1\325"+
    "\2\0\1\325\1\0\1\325\4\0\1\325\2\0\1\325"+
    "\2\0\1\325\22\0\1\325\1\0\1\325\23\0\2\325"+
    "\1\0\1\325\6\0\1\174\2\0\71\174\1\326\2\174"+
    "\1\326\1\174\1\0\4\174\73\177\1\327\12\177\67\200"+
    "\1\330\16\200\1\201\2\0\76\201\1\0\4\201\3\0"+
    "\2\10\1\331\26\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\5\10\1\332\23\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\31\10\11\0\7\10\20\0\1\205\1\10\1\0\1\205"+
    "\1\10\1\0\2\10\5\0\12\10\1\333\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\10\10\1\334\20\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\335\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\25\10\1\336\3\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\337\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\340\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\341\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\6\10\1\342\22\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\5\10\1\343\23\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\344\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\6\10\1\345\22\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\3\10\1\346\25\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\347\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\11\10\1\350\17\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\1\10\1\351\27\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\5\10\1\352\23\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\353\13\10\1\354"+
    "\2\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\2\10\1\355\26\10\11\0\1\10\1\356"+
    "\5\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\26\10\1\357\2\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\26\10\1\360\2\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\361\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\7\10\1\362\21\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\2\10\1\363\26\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\26\10\1\364\2\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\5\10\1\365\23\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\6\10\1\366\22\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\11\10\1\367\17\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\30\10\1\370\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\1\10"+
    "\1\371\27\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\11\10\1\372\17\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\2\10"+
    "\1\373\26\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\23\10\1\374\5\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\10\10"+
    "\1\375\20\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\7\10\1\376\21\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\12\10"+
    "\1\377\16\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\12\10\1\u0100\16\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\23\10"+
    "\1\u0101\5\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\12\10\1\u0102\16\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\26\10"+
    "\1\u0103\2\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\23\10\1\u0104\5\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\12\10"+
    "\1\u0105\16\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\1\10\1\u0106\27\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\16\10"+
    "\1\u0107\12\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\11\10\1\u0108\17\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\7\10"+
    "\1\u0109\21\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\23\10\1\u010a\5\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\7\10"+
    "\1\u010b\16\10\1\u010c\2\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\3\10\1\u010d\25\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\4\10\1\u010e\24\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u010f\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\4\10\1\u0110\24\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\5\10\1\u0111\23\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\11\10\1\u0112\17\10\11\0\2\10\1\u0113\4\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\10\10"+
    "\1\u0114\20\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\31\10\11\0\1\10\1\u0115\5\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\2\10"+
    "\1\u0116\26\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\5\10\1\u0117\23\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\6\10"+
    "\1\u0118\22\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\5\10\1\u0119\23\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\23\10"+
    "\1\u011a\5\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\12\10\1\u011b\10\10\1\u011c\5\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\3\10\1\u011d\25\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\2\10\1\u011e\26\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\6\10\1\u011f\22\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\10\10\1\u0120\20\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\1\u0121\2\0\1\u0121\1\0\1\u0121\4\0\1\u0121"+
    "\2\0\1\u0121\2\0\1\u0121\22\0\1\u0121\1\0\1\u0121"+
    "\23\0\2\u0121\1\0\1\u0121\11\0\1\u0122\2\0\1\u0122"+
    "\1\0\1\u0122\4\0\1\u0122\2\0\1\u0122\2\0\1\u0122"+
    "\22\0\1\u0122\1\0\1\u0122\23\0\2\u0122\1\0\1\u0122"+
    "\102\0\1\u0123\2\0\2\u0123\10\0\1\u0124\2\0\1\u0124"+
    "\1\0\1\u0124\4\0\1\u0124\2\0\1\u0124\2\0\1\u0124"+
    "\22\0\1\u0124\1\0\1\u0124\23\0\2\u0124\1\0\2\u0124"+
    "\5\0\1\174\2\0\71\174\1\326\2\174\1\326\1\u0125"+
    "\1\0\4\174\67\200\1\330\14\200\1\u0126\1\200\3\0"+
    "\31\10\11\0\6\10\1\u0127\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\3\10\1\u0128\25\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\12\10"+
    "\1\u0129\16\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\2\10\1\u012a\26\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\5\10"+
    "\1\u012b\23\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\25\10\1\u012c\3\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\11\10"+
    "\1\u012d\17\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\11\10\1\u012e\17\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\12\10"+
    "\1\u012f\16\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\11\10\1\u0130\17\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\23\10"+
    "\1\u0131\5\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\6\10\1\u0132\22\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\3\10"+
    "\1\u0133\25\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\31\10\11\0\1\u0134\6\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\6\10\1\u0135"+
    "\22\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\25\10\1\u0136\3\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\23\10\1\u0137"+
    "\5\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\6\10\1\u0138\22\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\7\10\1\u0139"+
    "\21\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\5\10\1\u013a\23\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\10\10\1\u013b"+
    "\20\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\26\10\1\u013c\2\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\3\10\1\u013d"+
    "\25\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\6\10\1\u013e\22\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\5\10\1\u013f"+
    "\23\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\6\10\1\u0140\22\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\31\10\11\0"+
    "\1\u0141\6\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\11\10\1\u0142\17\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u0143\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\6\10\1\u0144\22\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u0145\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\10\10\1\u0146\20\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\6\10\1\u0147\22\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\17\10\1\u0148\11\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\7\10\1\u0149\21\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\10\10\1\u014a\20\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u014b\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\31\10\11\0\3\10\1\u014c\3\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\2\10\1\u014d\26\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\4\10\1\u014e\24\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\1\10\1\u014f\27\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\7\10\1\u0150\21\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\5\10\1\u0151\23\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\2\10\1\u0152\26\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\12\10\1\u0153\16\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\7\10\1\u0154\21\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u0155\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\7\10\1\u0156\21\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\31\10\11\0\1\10"+
    "\1\u0157\5\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\11\10\1\u0158\17\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\12\10\1\u0159\16\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\2\10\1\u015a\26\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\12\10\1\u015b\16\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\4\10\1\u015c\24\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u015d\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\12\10\1\u015e\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\12\10\1\u015f\16\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\12\10\1\u0160\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\1\u0161\2\0\1\u0161"+
    "\1\0\1\u0161\4\0\1\u0161\2\0\1\u0161\2\0\1\u0161"+
    "\22\0\1\u0161\1\0\1\u0161\23\0\2\u0161\1\0\1\u0161"+
    "\11\0\1\u0162\2\0\1\u0162\1\0\1\u0162\4\0\1\u0162"+
    "\2\0\1\u0162\2\0\1\u0162\22\0\1\u0162\1\0\1\u0162"+
    "\23\0\2\u0162\1\0\1\u0162\102\0\1\u0123\2\0\1\u0123"+
    "\11\0\1\u0124\2\0\1\u0124\1\0\1\u0124\4\0\1\u0124"+
    "\2\0\1\u0124\2\0\1\u0124\22\0\1\u0124\1\0\1\u0124"+
    "\23\0\2\u0124\1\0\1\u0124\11\0\11\10\1\u0163\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\31\10\11\0\1\10\1\u0164\5\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\25\10\1\u0165\3\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\6\10\1\u0166\22\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\4\10\1\u0167\24\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\31\10\11\0\1\10\1\u0168\5\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\5\10\1\u0169\23\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\5\10\1\u016a\23\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\5\10\1\u016b\23\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\31\10\11\0\7\10\20\0\2\10\1\0\1\u016c"+
    "\1\10\1\0\2\10\5\0\11\10\1\u016d\17\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u016e\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\10\10\1\u016f\20\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\6\10\1\u0170\22\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\2\10\1\u0171\26\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u0172\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\31\10\11\0\1\10\1\u0173"+
    "\5\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\11\10\1\u0174\17\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\7\10\1\u0175\21\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\11\10\1\u0176\17\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\11\10\1\u0177\17\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\30\10\1\u0178\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\5\10\1\u0179\23\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\12\10"+
    "\1\u017a\16\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\23\10\1\u017b\5\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\31\10"+
    "\11\0\1\10\1\u017c\5\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\11\10\1\u017d\17\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\20\10"+
    "\1\u017e\10\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\3\10\1\u017f\25\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\24\10"+
    "\1\u0180\4\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\7\10\1\u0181\21\10\11\0\1\u0182"+
    "\6\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u0183\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\31\10\11\0\1\10\1\u0184"+
    "\5\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\u0185\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\10\10\1\u0186\20\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\2\10\1\u0187\26\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\3\10\1\u0188\25\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\31\10\11\0\1\10\1\u0189\5\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\3\10\1\u018a\25\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\u018b\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\31\10\11\0\1\u018c\6\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\5\10"+
    "\1\u018d\23\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\2\10\1\u018e\26\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\7\10"+
    "\1\u018f\21\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\23\10\1\u0190\5\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\1\u0191"+
    "\2\0\1\u0191\1\0\1\u0191\4\0\1\u0191\2\0\1\u0191"+
    "\2\0\1\u0191\22\0\1\u0191\1\0\1\u0191\23\0\2\u0191"+
    "\1\0\1\u0191\11\0\1\u0192\2\0\1\u0192\1\0\1\u0192"+
    "\4\0\1\u0192\2\0\1\u0192\2\0\1\u0192\22\0\1\u0192"+
    "\1\0\1\u0192\23\0\2\u0192\1\0\1\u0192\11\0\5\10"+
    "\1\u0193\23\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\26\10\1\u0194\2\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\1\10"+
    "\1\u0195\27\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\7\10\1\u0196\21\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\11\10"+
    "\1\u0197\17\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\3\10\1\u0198\25\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\11\10"+
    "\1\u0199\17\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\31\10\11\0\7\10\20\0\1\u016c"+
    "\1\10\1\0\1\u016c\1\10\1\0\1\u019a\1\10\5\0"+
    "\23\10\1\u019b\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\u019c\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\u019d\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\23\10\1\u019e\5\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u019f\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\7\10\1\u01a0\21\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\5\10\1\u01a1\23\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\1\10\1\u01a2\27\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u01a3\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\11\10\1\u01a4\17\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\23\10\1\u01a5\5\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\23\10\1\u01a6\5\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\21\10\1\u01a7\7\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\12\10\1\u01a8\16\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u01a9\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\24\10\1\u01aa\4\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u01ab\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\11\10\1\u01ac\17\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\12\10\1\u01ad\16\10\11\0\7\10\20\0\2\10\1\0"+
    "\2\10\1\0\2\10\5\0\5\10\1\u01ae\23\10\11\0"+
    "\7\10\20\0\2\10\1\0\2\10\1\0\2\10\5\0"+
    "\30\10\1\u01af\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\23\10\1\u01b0\5\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\1\10"+
    "\1\u01b1\27\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\23\10\1\u01b2\5\10\11\0\7\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\1\166"+
    "\2\0\1\166\1\0\1\166\4\0\1\166\2\0\1\166"+
    "\2\0\1\166\22\0\1\166\1\0\1\166\23\0\2\166"+
    "\1\0\1\166\11\0\1\171\2\0\1\171\1\0\1\171"+
    "\4\0\1\171\2\0\1\171\2\0\1\171\22\0\1\171"+
    "\1\0\1\171\23\0\2\171\1\0\1\171\11\0\3\10"+
    "\1\u01b3\25\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\31\10\11\0\1\10\1\u01b4\5\10"+
    "\20\0\2\10\1\0\2\10\1\0\2\10\5\0\3\10"+
    "\1\u01b5\25\10\11\0\7\10\20\0\2\10\1\0\2\10"+
    "\1\0\2\10\5\0\31\10\11\0\1\u01b6\6\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\11\10\1\u01b7"+
    "\17\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\12\10\1\u01b8\16\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\23\10\1\u01b9"+
    "\5\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\31\10\11\0\2\10\1\u01ba\4\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\10\10\1\u01bb"+
    "\20\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\6\10\1\u01bc\22\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\12\10\1\u01bd"+
    "\16\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\23\10\1\u01be\5\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\11\10\1\u01bf"+
    "\17\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\12\10\1\u01c0\16\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\2\10\1\u01c1"+
    "\26\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\12\10\1\u01c2\16\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\23\10\1\u01c3"+
    "\5\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\11\10\1\u01c4\17\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\12\10\1\u01c5"+
    "\16\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\12\10\1\u01c6\16\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\10\10\1\u01c7"+
    "\20\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\11\10\1\u01c8\17\10\11\0\7\10\20\0"+
    "\2\10\1\0\2\10\1\0\2\10\5\0\5\10\1\u01c9"+
    "\23\10\11\0\7\10\20\0\2\10\1\0\2\10\1\0"+
    "\2\10\5\0\30\10\1\u01ca\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\31\10\11\0\1\10"+
    "\1\u01cb\5\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\12\10\1\u01cc\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u01cd\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\31\10\11\0\1\10\1\u01ce\5\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\31\10\11\0\1\10"+
    "\1\u01cf\5\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\12\10\1\u01d0\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\23\10\1\u01d1\5\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\1\10\1\u01d2\27\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\11\10\1\u01d3\17\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\12\10\1\u01d4\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\5\0\6\10\1\u01d5\22\10"+
    "\11\0\7\10\20\0\2\10\1\0\2\10\1\0\2\10"+
    "\5\0\12\10\1\u01d6\16\10\11\0\7\10\20\0\2\10"+
    "\1\0\2\10\1\0\2\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24780];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\1\11\2\1\1\11\1\1\3\11"+
    "\5\1\2\11\1\1\6\11\1\1\3\11\62\1\6\11"+
    "\13\1\1\11\1\0\1\11\1\0\1\1\3\0\1\11"+
    "\2\0\1\1\2\0\102\1\1\11\13\1\2\11\1\1"+
    "\2\0\4\1\1\0\110\1\2\0\3\1\1\11\72\1"+
    "\2\0\56\1\2\0\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[470];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _DafnyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DafnyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 133: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 134: break;
          case 3: 
            { return IDENTDEF;
            } 
            // fall through
          case 135: break;
          case 4: 
            { return COLON;
            } 
            // fall through
          case 136: break;
          case 5: 
            { return COMMA;
            } 
            // fall through
          case 137: break;
          case 6: 
            { return VERTICALBAR;
            } 
            // fall through
          case 138: break;
          case 7: 
            { return ASSIGN;
            } 
            // fall through
          case 139: break;
          case 8: 
            { return BULLET;
            } 
            // fall through
          case 140: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 141: break;
          case 10: 
            { return BACKTICK;
            } 
            // fall through
          case 142: break;
          case 11: 
            { return SEMI;
            } 
            // fall through
          case 143: break;
          case 12: 
            { return CLOSEANGLEBRACKET;
            } 
            // fall through
          case 144: break;
          case 13: 
            { return PLUS;
            } 
            // fall through
          case 145: break;
          case 14: 
            { return MINUS;
            } 
            // fall through
          case 146: break;
          case 15: 
            { return LBRACE;
            } 
            // fall through
          case 147: break;
          case 16: 
            { return RBRACE;
            } 
            // fall through
          case 148: break;
          case 17: 
            { return LBRACKET;
            } 
            // fall through
          case 149: break;
          case 18: 
            { return RBRACKET;
            } 
            // fall through
          case 150: break;
          case 19: 
            { return OPENPAREN;
            } 
            // fall through
          case 151: break;
          case 20: 
            { return CLOSEPAREN;
            } 
            // fall through
          case 152: break;
          case 21: 
            { return NEQALT;
            } 
            // fall through
          case 153: break;
          case 22: 
            { return STAR;
            } 
            // fall through
          case 154: break;
          case 23: 
            { return OPENANGLEBRACKET;
            } 
            // fall through
          case 155: break;
          case 24: 
            { return DIGITS;
            } 
            // fall through
          case 156: break;
          case 25: 
            { return BY;
            } 
            // fall through
          case 157: break;
          case 26: 
            { return AS;
            } 
            // fall through
          case 158: break;
          case 27: 
            { return IN;
            } 
            // fall through
          case 159: break;
          case 28: 
            { return IF;
            } 
            // fall through
          case 160: break;
          case 29: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 161: break;
          case 30: 
            { return BOREDSMILEY;
            } 
            // fall through
          case 162: break;
          case 31: 
            { return GETS;
            } 
            // fall through
          case 163: break;
          case 32: 
            { return BOOLOR;
            } 
            // fall through
          case 164: break;
          case 33: 
            { return EQ;
            } 
            // fall through
          case 165: break;
          case 34: 
            { return DARROW;
            } 
            // fall through
          case 166: break;
          case 35: 
            { return TWODOTS;
            } 
            // fall through
          case 167: break;
          case 36: 
            { return BOOLAND;
            } 
            // fall through
          case 168: break;
          case 37: 
            { return NEQ;
            } 
            // fall through
          case 169: break;
          case 38: 
            { return STRINGTOKEN;
            } 
            // fall through
          case 170: break;
          case 39: 
            { return COMMENT;
            } 
            // fall through
          case 171: break;
          case 40: 
            { return BVTOKEN;
            } 
            // fall through
          case 172: break;
          case 41: 
            { return OLD;
            } 
            // fall through
          case 173: break;
          case 42: 
            { return INT;
            } 
            // fall through
          case 174: break;
          case 43: 
            { return NATTOKEN;
            } 
            // fall through
          case 175: break;
          case 44: 
            { return NEW;
            } 
            // fall through
          case 176: break;
          case 45: 
            { return SET;
            } 
            // fall through
          case 177: break;
          case 46: 
            { return SEQ;
            } 
            // fall through
          case 178: break;
          case 47: 
            { return MAP;
            } 
            // fall through
          case 179: break;
          case 48: 
            { return ELLIPSIS;
            } 
            // fall through
          case 180: break;
          case 49: 
            { return VAR;
            } 
            // fall through
          case 181: break;
          case 50: 
            { return NOTIN;
            } 
            // fall through
          case 182: break;
          case 51: 
            { return CHARTOKEN;
            } 
            // fall through
          case 183: break;
          case 52: 
            { return DECIMALDIGITS;
            } 
            // fall through
          case 184: break;
          case 53: 
            { return HEXDIGITS;
            } 
            // fall through
          case 185: break;
          case 54: 
            { return BOOL;
            } 
            // fall through
          case 186: break;
          case 55: 
            { return CHAR;
            } 
            // fall through
          case 187: break;
          case 56: 
            { return CALC;
            } 
            // fall through
          case 188: break;
          case 57: 
            { return CASE;
            } 
            // fall through
          case 189: break;
          case 58: 
            { return REAL;
            } 
            // fall through
          case 190: break;
          case 59: 
            { return ISET;
            } 
            // fall through
          case 191: break;
          case 60: 
            { return IMAP;
            } 
            // fall through
          case 192: break;
          case 61: 
            { return NULL;
            } 
            // fall through
          case 193: break;
          case 62: 
            { return THIS;
            } 
            // fall through
          case 194: break;
          case 63: 
            { return THEN;
            } 
            // fall through
          case 195: break;
          case 64: 
            { return TRUE;
            } 
            // fall through
          case 196: break;
          case 65: 
            { return TYPE;
            } 
            // fall through
          case 197: break;
          case 66: 
            { return ELSE;
            } 
            // fall through
          case 198: break;
          case 67: 
            { return FREE;
            } 
            // fall through
          case 199: break;
          case 68: 
            { return BREAK;
            } 
            // fall through
          case 200: break;
          case 69: 
            { return OBJECT_Q;
            } 
            // fall through
          case 201: break;
          case 70: 
            { return LABEL;
            } 
            // fall through
          case 202: break;
          case 71: 
            { return LEMMA;
            } 
            // fall through
          case 203: break;
          case 72: 
            { return CONST;
            } 
            // fall through
          case 204: break;
          case 73: 
            { return CLASSTOKEN;
            } 
            // fall through
          case 205: break;
          case 74: 
            { return READS;
            } 
            // fall through
          case 206: break;
          case 75: 
            { return TRAIT;
            } 
            // fall through
          case 207: break;
          case 76: 
            { return GHOST;
            } 
            // fall through
          case 208: break;
          case 77: 
            { return MATCH;
            } 
            // fall through
          case 209: break;
          case 78: 
            { return PRINT;
            } 
            // fall through
          case 210: break;
          case 79: 
            { return YIELD;
            } 
            // fall through
          case 211: break;
          case 80: 
            { return FALSE;
            } 
            // fall through
          case 212: break;
          case 81: 
            { return FRESH;
            } 
            // fall through
          case 213: break;
          case 82: 
            { return WHILE;
            } 
            // fall through
          case 214: break;
          case 83: 
            { return WHERE;
            } 
            // fall through
          case 215: break;
          case 84: 
            { return OBJECT;
            } 
            // fall through
          case 216: break;
          case 85: 
            { return OPENED;
            } 
            // fall through
          case 217: break;
          case 86: 
            { return ARRAYTOKEN;
            } 
            // fall through
          case 218: break;
          case 87: 
            { return ASSERT;
            } 
            // fall through
          case 219: break;
          case 88: 
            { return ASSUME;
            } 
            // fall through
          case 220: break;
          case 89: 
            { return RETURN;
            } 
            // fall through
          case 221: break;
          case 90: 
            { return REVEAL;
            } 
            // fall through
          case 222: break;
          case 91: 
            { return IMPORT;
            } 
            // fall through
          case 223: break;
          case 92: 
            { return EXISTSTOKEN;
            } 
            // fall through
          case 224: break;
          case 93: 
            { return EXPORT;
            } 
            // fall through
          case 225: break;
          case 94: 
            { return STATIC;
            } 
            // fall through
          case 226: break;
          case 95: 
            { return STRING;
            } 
            // fall through
          case 227: break;
          case 96: 
            { return MODIFY;
            } 
            // fall through
          case 228: break;
          case 97: 
            { return MODULE;
            } 
            // fall through
          case 229: break;
          case 98: 
            { return METHOD;
            } 
            // fall through
          case 230: break;
          case 99: 
            { return YIELDS;
            } 
            // fall through
          case 231: break;
          case 100: 
            { return FORALLTOKEN;
            } 
            // fall through
          case 232: break;
          case 101: 
            { return COLEMMA;
            } 
            // fall through
          case 233: break;
          case 102: 
            { return ARRAYTOKEN_Q;
            } 
            // fall through
          case 234: break;
          case 103: 
            { return RETURNS;
            } 
            // fall through
          case 235: break;
          case 104: 
            { return REVEALS;
            } 
            // fall through
          case 236: break;
          case 105: 
            { return REFINES;
            } 
            // fall through
          case 237: break;
          case 106: 
            { return INCLUDE;
            } 
            // fall through
          case 238: break;
          case 107: 
            { return NEWTYPE;
            } 
            // fall through
          case 239: break;
          case 108: 
            { return ENSURES;
            } 
            // fall through
          case 240: break;
          case 109: 
            { return EXTENDS;
            } 
            // fall through
          case 241: break;
          case 110: 
            { return ORDINAL;
            } 
            // fall through
          case 242: break;
          case 111: 
            { return WITNESS;
            } 
            // fall through
          case 243: break;
          case 112: 
            { return COMETHOD;
            } 
            // fall through
          case 244: break;
          case 113: 
            { return ABSTRACT;
            } 
            // fall through
          case 245: break;
          case 114: 
            { return REQUIRES;
            } 
            // fall through
          case 246: break;
          case 115: 
            { return ITERATOR;
            } 
            // fall through
          case 247: break;
          case 116: 
            { return TWOSTATE;
            } 
            // fall through
          case 248: break;
          case 117: 
            { return MODIFIES;
            } 
            // fall through
          case 249: break;
          case 118: 
            { return MULTISET;
            } 
            // fall through
          case 250: break;
          case 119: 
            { return PARALLEL;
            } 
            // fall through
          case 251: break;
          case 120: 
            { return PROVIDES;
            } 
            // fall through
          case 252: break;
          case 121: 
            { return DATATYPE;
            } 
            // fall through
          case 253: break;
          case 122: 
            { return FUNCTION;
            } 
            // fall through
          case 254: break;
          case 123: 
            { return ALLOCATED;
            } 
            // fall through
          case 255: break;
          case 124: 
            { return INDUCTIVE;
            } 
            // fall through
          case 256: break;
          case 125: 
            { return INVARIANT;
            } 
            // fall through
          case 257: break;
          case 126: 
            { return UNCHANGED;
            } 
            // fall through
          case 258: break;
          case 127: 
            { return PROTECTED;
            } 
            // fall through
          case 259: break;
          case 128: 
            { return PREDICATE;
            } 
            // fall through
          case 260: break;
          case 129: 
            { return DECREASES;
            } 
            // fall through
          case 261: break;
          case 130: 
            { return CODATATYPE;
            } 
            // fall through
          case 262: break;
          case 131: 
            { return CONSTRUCTOR;
            } 
            // fall through
          case 263: break;
          case 132: 
            { return COPREDICATE;
            } 
            // fall through
          case 264: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
