// This is a generated file. Not intended for manual editing.
package DafnyLanguage.psi.impl;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.PsiElement;
import com.intellij.lang.ASTNode;
import DafnyLanguage.psi.DafnyTokenType;

public interface DafnyTypeImpl {


  IElementType ABSTRACT = new DafnyTokenType("abstract");
  IElementType ALLOCATED = new DafnyTokenType("allocated");
  IElementType ARRAYTOKEN = new DafnyTokenType("arrayToken");
  IElementType ARRAYTOKEN_Q = new DafnyTokenType("arrayToken_q");
  IElementType AS = new DafnyTokenType("as");
  IElementType ASSERT = new DafnyTokenType("assert");
  IElementType ASSIGN = new DafnyTokenType("assign");
  IElementType ASSUME = new DafnyTokenType("assume");
  IElementType BACKTICK = new DafnyTokenType("backtick");
  IElementType BOOL = new DafnyTokenType("bool");
  IElementType BOOLAND = new DafnyTokenType("boolAnd");
  IElementType BOOLOR = new DafnyTokenType("boolOr");
  IElementType BOREDSMILEY = new DafnyTokenType("boredSmiley");
  IElementType BREAK = new DafnyTokenType("break");
  IElementType BULLET = new DafnyTokenType("bullet");
  IElementType BVTOKEN = new DafnyTokenType("bvToken");
  IElementType BY = new DafnyTokenType("by");
  IElementType CALC = new DafnyTokenType("calc");
  IElementType CASE = new DafnyTokenType("case");
  IElementType CHAR = new DafnyTokenType("char");
  IElementType CHARTOKEN = new DafnyTokenType("charToken");
  IElementType CLASSTOKEN = new DafnyTokenType("classToken");
  IElementType CLOSEANGLEBRACKET = new DafnyTokenType("closeAngleBracket");
  IElementType CLOSEPAREN = new DafnyTokenType("closeparen");
  IElementType CODATATYPE = new DafnyTokenType("codatatype");
  IElementType COLEMMA = new DafnyTokenType("colemma");
  IElementType COLON = new DafnyTokenType("colon");
  IElementType COMETHOD = new DafnyTokenType("comethod");
  IElementType COMMA = new DafnyTokenType("comma");
  IElementType COMMENT = new DafnyTokenType("comment");
  IElementType CONST = new DafnyTokenType("const");
  IElementType CONSTRUCTOR = new DafnyTokenType("constructor");
  IElementType COPREDICATE = new DafnyTokenType("copredicate");
  IElementType DARROW = new DafnyTokenType("darrow");
  IElementType DATATYPE = new DafnyTokenType("datatype");
  IElementType DECIMALDIGITS = new DafnyTokenType("decimaldigits");
  IElementType DECREASES = new DafnyTokenType("decreases");
  IElementType DIGITS = new DafnyTokenType("digits");
  IElementType DOT = new DafnyTokenType("dot");
  IElementType DOUBLECOLON = new DafnyTokenType("doublecolon");
  IElementType ELLIPSIS = new DafnyTokenType("ellipsis");
  IElementType ELSE = new DafnyTokenType("else");
  IElementType ENSURES = new DafnyTokenType("ensures");
  IElementType EQ = new DafnyTokenType("eq");
  IElementType EXISTSTOKEN = new DafnyTokenType("existstoken");
  IElementType EXPORT = new DafnyTokenType("export");
  IElementType EXTENDS = new DafnyTokenType("extends");
  IElementType FALSE = new DafnyTokenType("false");
  IElementType FORALLTOKEN = new DafnyTokenType("foralltoken");
  IElementType FREE = new DafnyTokenType("free");
  IElementType FRESH = new DafnyTokenType("fresh");
  IElementType FUNCTION = new DafnyTokenType("function");
  IElementType GETS = new DafnyTokenType("gets");
  IElementType GHOST = new DafnyTokenType("ghost");
  IElementType HEXDIGITS = new DafnyTokenType("hexdigits");
  IElementType IDENTDEF = new DafnyTokenType("identdef");
  IElementType IF = new DafnyTokenType("if");
  IElementType IMAP = new DafnyTokenType("imap");
  IElementType IMPORT = new DafnyTokenType("import");
  IElementType IN = new DafnyTokenType("in");
  IElementType INCLUDE = new DafnyTokenType("include");
  IElementType INDUCTIVE = new DafnyTokenType("inductive");
  IElementType INT = new DafnyTokenType("int");
  IElementType INVARIANT = new DafnyTokenType("invariant");
  IElementType ISET = new DafnyTokenType("iset");
  IElementType ITERATOR = new DafnyTokenType("iterator");
  IElementType LABEL = new DafnyTokenType("label");
  IElementType LBRACE = new DafnyTokenType("lbrace");
  IElementType LBRACKET = new DafnyTokenType("lbracket");
  IElementType LEMMA = new DafnyTokenType("lemma");
  IElementType MAP = new DafnyTokenType("map");
  IElementType MATCH = new DafnyTokenType("match");
  IElementType METHOD = new DafnyTokenType("method");
  IElementType MINUS = new DafnyTokenType("minus");
  IElementType MODIFIES = new DafnyTokenType("modifies");
  IElementType MODIFY = new DafnyTokenType("modify");
  IElementType MODULE = new DafnyTokenType("module");
  IElementType MULTISET = new DafnyTokenType("multiset");
  IElementType NATTOKEN = new DafnyTokenType("nattoken");
  IElementType NEQ = new DafnyTokenType("neq");
  IElementType NEQALT = new DafnyTokenType("neqAlt");
  IElementType NEW = new DafnyTokenType("new");
  IElementType NEWTYPE = new DafnyTokenType("newtype");
  IElementType NOTIN = new DafnyTokenType("notIn");
  IElementType NULL = new DafnyTokenType("null");
  IElementType OBJECT = new DafnyTokenType("object");
  IElementType OBJECT_Q = new DafnyTokenType("object_q");
  IElementType OLD = new DafnyTokenType("old");
  IElementType OPENANGLEBRACKET = new DafnyTokenType("openAngleBracket");
  IElementType OPENED = new DafnyTokenType("opened");
  IElementType OPENPAREN = new DafnyTokenType("openparen");
  IElementType ORDINAL = new DafnyTokenType("ORDINAL");
  IElementType PARALLEL = new DafnyTokenType("parallel");
  IElementType PLUS = new DafnyTokenType("plus");
  IElementType PREDICATE = new DafnyTokenType("predicate");
  IElementType PRINT = new DafnyTokenType("print");
  IElementType PROTECTED = new DafnyTokenType("protected");
  IElementType PROVIDES = new DafnyTokenType("provides");
  IElementType RBRACE = new DafnyTokenType("rbrace");
  IElementType RBRACKET = new DafnyTokenType("rbracket");
  IElementType READS = new DafnyTokenType("reads");
  IElementType REAL = new DafnyTokenType("real");
  IElementType REFINES = new DafnyTokenType("refines");
  IElementType REQUIRES = new DafnyTokenType("requires");
  IElementType RETURN = new DafnyTokenType("return");
  IElementType RETURNS = new DafnyTokenType("returns");
  IElementType REVEAL = new DafnyTokenType("reveal");
  IElementType REVEALS = new DafnyTokenType("reveals");
  IElementType SEMI = new DafnyTokenType("semi");
  IElementType SEQ = new DafnyTokenType("seq");
  IElementType SET = new DafnyTokenType("set");
  IElementType STAR = new DafnyTokenType("star");
  IElementType STATIC = new DafnyTokenType("static");
  IElementType STRING = new DafnyTokenType("string");
  IElementType STRINGTOKEN = new DafnyTokenType("stringToken");
  IElementType THEN = new DafnyTokenType("then");
  IElementType THIS = new DafnyTokenType("this");
  IElementType TRAIT = new DafnyTokenType("trait");
  IElementType TRUE = new DafnyTokenType("true");
  IElementType TWODOTS = new DafnyTokenType("twoDots");
  IElementType TWOSTATE = new DafnyTokenType("twostate");
  IElementType TYPE = new DafnyTokenType("type");
  IElementType UNCHANGED = new DafnyTokenType("unchanged");
  IElementType VAR = new DafnyTokenType("var");
  IElementType VERTICALBAR = new DafnyTokenType("verticalbar");
  IElementType WHERE = new DafnyTokenType("where");
  IElementType WHILE = new DafnyTokenType("while");
  IElementType WITNESS = new DafnyTokenType("witness");
  IElementType YIELD = new DafnyTokenType("yield");
  IElementType YIELDS = new DafnyTokenType("yields");

  class Factory {
  }
}
