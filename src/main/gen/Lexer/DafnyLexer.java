/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package Lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static DafnyLanguage.psi.impl.DafnyTypeImpl.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>DafnyLexer.flex</tt>
 */
public class DafnyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1696 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\10\3\1\5\66\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\102\1\2\2\76\1\3\22\0\1\102\1\63\1\70\4\0\1\66\1\60\1\61\1\65\1\0"+
    "\1\36\1\0\1\42\1\0\1\71\11\74\1\35\1\44\1\62\1\40\1\45\1\77\1\73\1\24\2\72"+
    "\1\21\1\103\1\104\2\100\1\22\2\100\1\25\1\100\1\23\1\17\2\100\1\20\10\100"+
    "\1\56\1\67\1\57\1\101\1\75\1\43\1\11\1\4\1\7\1\47\1\16\1\51\1\30\1\10\1\13"+
    "\1\26\1\100\1\6\1\31\1\14\1\5\1\34\1\33\1\12\1\27\1\15\1\32\1\50\1\52\1\53"+
    "\1\46\1\100\1\54\1\37\1\55\7\0\1\1\234\0\1\41\5\0\2\1\66\0\1\64\37\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\20\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\4\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\1\23\1\24"+
    "\1\3\2\1\1\25\1\1\1\25\2\3\1\26\11\3"+
    "\1\27\1\3\1\30\25\3\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\6\3\1\0\1\36\1\0\1\3\5\0"+
    "\1\37\2\0\1\25\1\0\2\3\2\40\17\3\1\41"+
    "\6\3\1\42\13\3\1\43\1\44\2\3\1\45\4\3"+
    "\1\46\2\3\1\47\3\3\1\50\2\51\2\0\1\52"+
    "\1\0\1\53\1\54\1\25\1\37\1\55\1\56\7\3"+
    "\1\57\1\60\1\61\2\3\1\62\6\3\1\63\1\64"+
    "\2\3\1\65\1\3\1\66\1\3\1\67\20\3\1\0"+
    "\1\52\1\0\1\53\1\54\1\53\1\70\1\71\1\3"+
    "\1\72\2\3\1\73\2\3\1\74\7\3\1\75\6\3"+
    "\1\76\12\3\2\0\1\77\4\3\1\100\1\101\1\3"+
    "\1\102\3\3\1\103\3\3\1\104\1\3\1\105\1\106"+
    "\1\3\1\107\10\3\2\0\1\110\3\3\1\111\4\3"+
    "\1\112\1\3\1\113\1\114\10\3\1\115\3\3\1\116"+
    "\2\3\1\117\1\120\1\121\1\122\2\3\1\123\2\3"+
    "\1\124\3\3\1\125\1\126\1\127\1\130\1\131\3\3"+
    "\1\132\1\3\1\133\1\134\12\3\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\212\0\212\0\u05a9"+
    "\0\212\0\u05ee\0\212\0\212\0\212\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\u0747\0\212\0\212\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0"+
    "\0\u08e5\0\u092a\0\u096f\0\u0228\0\u09b4\0\u09f9\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\212\0\212\0\212"+
    "\0\212\0\212\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\212\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u0816\0\u161a\0\212\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u0228\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u0228\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\u1da6\0\u0228\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u0228\0\u0228\0\u20e2"+
    "\0\u2127\0\u0228\0\u216c\0\u21b1\0\u21f6\0\u223b\0\212\0\u2280"+
    "\0\u22c5\0\u0228\0\u230a\0\u234f\0\u2394\0\212\0\212\0\u0b97"+
    "\0\u23d9\0\u241e\0\212\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u08a0"+
    "\0\u0228\0\u0228\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0"+
    "\0\u2715\0\u0228\0\u0228\0\u0228\0\u275a\0\u279f\0\u0228\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u0228\0\u0228\0\u2982"+
    "\0\u29c7\0\u0228\0\u2a0c\0\u0228\0\u2a51\0\u0228\0\u2a96\0\u2adb"+
    "\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03"+
    "\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u1590"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u165f\0\u2ffa\0\u0228\0\u303f\0\u3084"+
    "\0\u30c9\0\u310e\0\u0228\0\u3153\0\u3198\0\u0228\0\u31dd\0\u3222"+
    "\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u0228\0\u33c0\0\u3405"+
    "\0\u344a\0\u348f\0\u34d4\0\u3519\0\u0228\0\u355e\0\u35a3\0\u35e8"+
    "\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810"+
    "\0\u3855\0\u0228\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u0b97"+
    "\0\u39f3\0\u0228\0\u3a38\0\u3a7d\0\u3ac2\0\u0228\0\u3b07\0\u3b4c"+
    "\0\u3b91\0\u0228\0\u3bd6\0\u0228\0\u0228\0\u3c1b\0\u0228\0\u3c60"+
    "\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88"+
    "\0\u3ecd\0\u0228\0\u3f12\0\u3f57\0\u3f9c\0\u0b97\0\u3fe1\0\u4026"+
    "\0\u406b\0\u40b0\0\u0228\0\u40f5\0\u0228\0\u0228\0\u413a\0\u417f"+
    "\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u0228\0\u4362"+
    "\0\u43a7\0\u43ec\0\u0228\0\u4431\0\u4476\0\u0228\0\u0228\0\u0228"+
    "\0\u0228\0\u44bb\0\u4500\0\u0228\0\u4545\0\u458a\0\u0228\0\u45cf"+
    "\0\u4614\0\u4659\0\u0228\0\u0228\0\u0228\0\u0228\0\u0228\0\u469e"+
    "\0\u46e3\0\u4728\0\u0228\0\u476d\0\u0228\0\u0228\0\u47b2\0\u47f7"+
    "\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f"+
    "\0\u0228";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\7\11\1\21"+
    "\1\22\1\23\2\11\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\11\1\36\1\37"+
    "\1\40\1\41\1\11\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\11\1\60\1\61\1\3\1\4\2\11\1\3"+
    "\1\4\1\62\1\11\105\3\107\0\2\4\72\0\1\4"+
    "\3\0\1\4\6\0\1\11\1\63\27\11\6\0\1\11"+
    "\2\0\1\64\1\11\1\65\3\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\1\66\30\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\12\11\1\67\16\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\1\11\1\70\1\71\1\11\1\72\1\73\23\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\31\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\6\74\1\75\14\74\1\76\5\74"+
    "\11\0\6\74\15\0\2\74\1\0\2\74\1\0\2\74"+
    "\2\0\2\74\4\0\12\11\1\77\16\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\10\11"+
    "\1\100\1\101\11\11\1\102\1\11\1\103\3\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\5\11\1\104\4\11\1\105\16\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\4\11\1\106"+
    "\1\11\1\107\22\11\6\0\1\11\2\0\1\110\3\11"+
    "\1\111\1\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\2\11"+
    "\1\112\5\11\1\113\20\11\6\0\1\11\2\0\5\11"+
    "\1\114\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\14\11\1\115"+
    "\14\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\11\11\1\116\1\117\16\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\4\11"+
    "\1\120\24\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\1\11\1\121\3\11\1\122\4\11"+
    "\1\123\13\11\1\124\2\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\6\11\1\125\22\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\35\0\1\126\1\0\1\127\1\130\104\0\1\131\4\0"+
    "\1\132\101\0\1\133\46\0\5\11\1\134\4\11\1\135"+
    "\16\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\5\11\1\136\4\11\1\137\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\26\11\1\140\2\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\7\11\1\141\21\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\13\0"+
    "\1\142\24\0\1\143\44\0\2\144\2\0\31\145\11\144"+
    "\6\145\4\144\2\0\5\144\1\146\1\144\2\145\1\144"+
    "\2\145\1\144\2\145\2\144\2\145\65\0\1\147\1\0"+
    "\1\150\15\0\2\151\2\0\63\151\1\152\1\153\14\151"+
    "\1\154\3\0\47\154\1\155\15\154\1\156\2\154\2\156"+
    "\1\0\6\154\70\0\1\157\14\0\1\154\3\0\65\154"+
    "\1\156\2\154\2\156\1\0\6\154\4\0\13\11\1\160"+
    "\15\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\1\11\1\161\27\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\31\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\1\162\1\11\1\0\1\163\1\11\1\0\3\11\1\0"+
    "\2\11\4\0\22\11\1\164\6\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\25\11\1\165"+
    "\3\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\2\11\1\166\5\11\1\167\17\11\1\170"+
    "\6\0\1\11\2\0\1\11\1\171\4\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\5\11\1\172\23\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\5\11"+
    "\1\173\23\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\2\11\1\174\20\11\1\175\5\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\31\74\11\0\6\74\15\0\2\74\1\0\2\74"+
    "\1\0\2\74\2\0\2\74\4\0\6\74\1\176\22\74"+
    "\11\0\6\74\15\0\2\74\1\0\2\74\1\0\2\74"+
    "\2\0\2\74\4\0\23\74\1\177\5\74\11\0\6\74"+
    "\15\0\2\74\1\0\2\74\1\0\2\74\2\0\2\74"+
    "\4\0\5\11\1\200\21\11\1\201\1\11\6\0\1\11"+
    "\2\0\2\11\1\202\3\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\11\11\1\203\17\11\6\0\1\11\2\0\1\11"+
    "\1\204\1\205\3\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\12\11\1\206\16\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\12\11\1\207\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\5\11\1\210\22\11\1\211\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\11\11\1\212\17\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\31\11\6\0\1\11\2\0\4\11\1\213\1\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\12\11\1\214\16\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\5\11\1\215\23\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\30\11\1\216\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\1\11\1\217\27\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\23\11\1\220\5\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\23\11\1\221\5\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\30\11\1\222\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\15\11"+
    "\1\223\13\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\5\11\1\224\1\225\22\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\11\11\1\226\15\11\1\227\1\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\1\11\1\230"+
    "\27\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\31\11\6\0\1\11\2\0\1\11\1\231"+
    "\4\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\30\11\1\232"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\11\11\1\233\17\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\2\11\1\234\26\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\1\11\1\235\10\11\1\236\16\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\42\0\1\237"+
    "\46\0\11\11\1\240\17\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\3\11\1\241\25\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\6\11\1\242\22\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\6\11\1\243\22\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\10\11\1\244\20\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\11\11\1\245\17\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\14\0\1\246\156\0\1\247\22\0\31\74\11\0\6\74"+
    "\12\0\1\250\2\0\2\74\1\0\2\74\1\0\2\74"+
    "\2\0\2\74\12\0\1\144\1\0\2\144\14\0\1\251"+
    "\34\0\3\144\13\0\65\147\1\252\17\147\1\150\1\0"+
    "\1\253\1\0\72\150\1\0\6\150\12\0\1\151\1\0"+
    "\2\151\14\0\1\254\34\0\3\151\104\0\1\255\2\0"+
    "\1\255\14\0\1\256\2\0\1\256\1\0\1\256\4\0"+
    "\1\256\2\0\1\256\2\0\1\256\22\0\1\256\1\0"+
    "\1\256\17\0\2\256\1\0\1\256\6\0\2\256\1\154"+
    "\3\0\65\154\1\257\2\154\1\257\1\154\1\0\6\154"+
    "\70\157\1\260\14\157\4\0\31\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\1\11\1\261\4\0\2\11"+
    "\1\262\26\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\31\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\1\163\1\11\1\0"+
    "\1\163\1\11\1\0\3\11\1\0\2\11\4\0\12\11"+
    "\1\263\16\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\25\11\1\264\3\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\12\11"+
    "\1\265\16\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\23\11\1\266\5\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\6\11"+
    "\1\267\22\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\5\11\1\270\23\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\23\11"+
    "\1\271\5\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\6\11\1\272\22\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\3\11"+
    "\1\273\25\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\12\11\1\274\16\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\5\74"+
    "\1\275\23\74\11\0\6\74\15\0\2\74\1\0\2\74"+
    "\1\0\2\74\2\0\2\74\4\0\26\74\1\276\2\74"+
    "\11\0\6\74\15\0\2\74\1\0\2\74\1\0\2\74"+
    "\2\0\2\74\4\0\2\11\1\277\26\11\6\0\1\11"+
    "\2\0\1\11\1\300\4\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\26\11\1\301\2\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\12\11\1\302\16\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\26\11\1\303\2\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\5\11\1\304\23\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\6\11\1\305\22\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\11\11\1\306\17\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\30\11\1\307\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\1\11\1\310\27\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\11\11\1\311\17\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\10\11\1\312\20\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\7\11\1\313\21\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\12\11\1\314\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\23\11\1\315\5\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\12\11\1\316\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\26\11\1\317\2\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\1\11\1\320\27\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\16\11\1\321\12\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\11\11\1\322\17\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\7\11\1\323\21\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\23\11\1\324\5\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\7\11\1\325\21\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\4\11\1\326\24\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\11\11\1\327\17\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\11\11\1\330\17\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\31\11\6\0\1\11\2\0\1\11\1\331\4\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\5\11\1\332\23\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\6\11\1\333\22\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\11\11\1\334\17\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\3\11\1\335\25\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\10\11\1\336\20\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\1\337\2\0\1\337\1\0\1\337\4\0\1\337\2\0"+
    "\1\337\2\0\1\337\22\0\1\337\1\0\1\337\17\0"+
    "\2\337\1\0\1\337\6\0\2\337\65\147\1\252\1\147"+
    "\1\340\15\147\4\0\1\341\2\0\1\341\1\0\1\341"+
    "\4\0\1\341\2\0\1\341\2\0\1\341\22\0\1\341"+
    "\1\0\1\341\17\0\2\341\1\0\1\341\6\0\2\341"+
    "\71\0\1\342\2\0\2\342\13\0\1\343\2\0\1\343"+
    "\1\0\1\343\4\0\1\343\2\0\1\343\2\0\1\343"+
    "\22\0\1\343\1\0\1\343\17\0\2\343\1\0\2\343"+
    "\5\0\2\343\1\154\3\0\65\154\1\257\2\154\1\257"+
    "\1\344\1\0\6\154\4\0\3\11\1\345\25\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\5\11\1\346\23\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\25\11\1\347\3\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\11\11\1\350\17\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\12\11\1\351\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\11\11\1\352\17\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\23\11\1\353\5\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\31\74\11\0\1\354\5\74\15\0\2\74\1\0\2\74"+
    "\1\0\2\74\2\0\2\74\4\0\25\74\1\355\3\74"+
    "\11\0\6\74\15\0\2\74\1\0\2\74\1\0\2\74"+
    "\2\0\2\74\4\0\23\11\1\356\5\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\7\11"+
    "\1\357\21\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\5\11\1\360\23\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\3\11"+
    "\1\361\25\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\6\11\1\362\22\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\5\11"+
    "\1\363\23\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\6\11\1\364\22\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\31\11"+
    "\6\0\1\11\2\0\1\365\5\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\11\11\1\366\17\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\11\11\1\367"+
    "\17\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\6\11\1\370\22\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\6\11\1\371"+
    "\22\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\17\11\1\372\11\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\7\11\1\373"+
    "\21\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\10\11\1\374\20\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\11\11\1\375"+
    "\17\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\31\11\6\0\1\11\2\0\3\11\1\376"+
    "\2\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\1\11\1\377"+
    "\27\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\7\11\1\u0100\21\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\12\11\1\u0101"+
    "\16\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\7\11\1\u0102\21\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\11\11\1\u0103"+
    "\17\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\12\11\1\u0104\16\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\7\11\1\u0105"+
    "\21\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\11\11\1\u0106\17\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\12\11\1\u0107"+
    "\16\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\1\u0108\2\0\1\u0108\1\0\1\u0108\4\0"+
    "\1\u0108\2\0\1\u0108\2\0\1\u0108\22\0\1\u0108\1\0"+
    "\1\u0108\17\0\2\u0108\1\0\1\u0108\6\0\2\u0108\4\0"+
    "\1\u0109\2\0\1\u0109\1\0\1\u0109\4\0\1\u0109\2\0"+
    "\1\u0109\2\0\1\u0109\22\0\1\u0109\1\0\1\u0109\17\0"+
    "\2\u0109\1\0\1\u0109\6\0\2\u0109\71\0\1\342\2\0"+
    "\1\342\14\0\1\343\2\0\1\343\1\0\1\343\4\0"+
    "\1\343\2\0\1\343\2\0\1\343\22\0\1\343\1\0"+
    "\1\343\17\0\2\343\1\0\1\343\6\0\2\343\4\0"+
    "\11\11\1\u010a\17\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\25\11\1\u010b\3\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\6\11\1\u010c\22\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\31\11\6\0\1\11\2\0"+
    "\1\11\1\u010d\4\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\5\11\1\u010e\23\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\31\74\11\0\6\74\15\0"+
    "\2\74\1\0\1\u010f\1\74\1\0\2\74\2\0\2\74"+
    "\4\0\12\74\1\u0110\16\74\11\0\6\74\15\0\2\74"+
    "\1\0\2\74\1\0\2\74\2\0\2\74\4\0\6\11"+
    "\1\u0111\22\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\2\11\1\u0112\26\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\11\11"+
    "\1\u0113\17\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\7\11\1\u0114\21\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\11\11"+
    "\1\u0115\17\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\11\11\1\u0116\17\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\30\11"+
    "\1\u0117\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\5\11\1\u0118\23\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\12\11\1\u0119"+
    "\16\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\11\11\1\u011a\17\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\20\11\1\u011b"+
    "\10\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\3\11\1\u011c\25\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\24\11\1\u011d"+
    "\4\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\7\11\1\u011e\21\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\31\11\6\0"+
    "\1\11\2\0\1\11\1\u011f\4\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\23\11\1\u0120\5\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\3\11\1\u0121"+
    "\25\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\3\11\1\u0122\25\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\31\11\6\0"+
    "\1\11\2\0\1\u0123\5\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\5\11\1\u0124\23\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\3\11\1\u0125\25\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\7\11\1\u0126\21\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\23\11\1\u0127\5\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\1\u0128\2\0\1\u0128\1\0\1\u0128\4\0\1\u0128"+
    "\2\0\1\u0128\2\0\1\u0128\22\0\1\u0128\1\0\1\u0128"+
    "\17\0\2\u0128\1\0\1\u0128\6\0\2\u0128\4\0\1\u0129"+
    "\2\0\1\u0129\1\0\1\u0129\4\0\1\u0129\2\0\1\u0129"+
    "\2\0\1\u0129\22\0\1\u0129\1\0\1\u0129\17\0\2\u0129"+
    "\1\0\1\u0129\6\0\2\u0129\4\0\5\11\1\u012a\23\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\26\11\1\u012b\2\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\7\11\1\u012c\21\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\11\11\1\u012d\17\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\31\74\11\0\6\74"+
    "\15\0\1\u010f\1\74\1\0\1\u010f\1\74\1\0\1\u012e"+
    "\1\74\2\0\2\74\4\0\12\11\1\u012f\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\7\11\1\u0130\21\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\5\11\1\u0131\23\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\1\11\1\u0132\27\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\12\11\1\u0133\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\11\11\1\u0134\17\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\23\11\1\u0135\5\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\21\11\1\u0136\7\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\12\11\1\u0137\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\12\11\1\u0138\16\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\11\11\1\u0139\17\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\5\11\1\u013a\23\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\30\11\1\u013b\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\23\11"+
    "\1\u013c\5\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\5\11\1\u013d\23\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\1\11"+
    "\1\u013e\27\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\23\11\1\u013f\5\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\1\144"+
    "\2\0\1\144\1\0\1\144\4\0\1\144\2\0\1\144"+
    "\2\0\1\144\22\0\1\144\1\0\1\144\17\0\2\144"+
    "\1\0\1\144\6\0\2\144\4\0\1\151\2\0\1\151"+
    "\1\0\1\151\4\0\1\151\2\0\1\151\2\0\1\151"+
    "\22\0\1\151\1\0\1\151\17\0\2\151\1\0\1\151"+
    "\6\0\2\151\4\0\3\11\1\u0140\25\11\6\0\1\11"+
    "\2\0\6\11\2\0\2\11\7\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\2\11\4\0\3\11"+
    "\1\u0141\25\11\6\0\1\11\2\0\6\11\2\0\2\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\2\11\4\0\31\11\6\0\1\11\2\0\1\u0142"+
    "\5\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\23\11\1\u0143"+
    "\5\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\31\11\6\0\1\11\2\0\2\11\1\u0144"+
    "\3\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\10\11\1\u0145"+
    "\20\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\6\11\1\u0146\22\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\12\11\1\u0147"+
    "\16\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\23\11\1\u0148\5\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\11\11\1\u0149"+
    "\17\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\12\11\1\u014a\16\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\11\11\1\u014b"+
    "\17\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\12\11\1\u014c\16\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\12\11\1\u014d"+
    "\16\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\2\11\1\u014e\26\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\10\11\1\u014f"+
    "\20\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\11\11\1\u0150\17\11\6\0\1\11\2\0"+
    "\6\11\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\5\11\1\u0151"+
    "\23\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\4\0\30\11\1\u0152\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\12\11\1\u0153\16\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\11\11\1\u0154\17\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\31\11\6\0\1\11"+
    "\2\0\1\11\1\u0155\4\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\12\11\1\u0156\16\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\23\11\1\u0157\5\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\1\u0158\30\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\1\11\1\u0159\27\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\11\11\1\u015a\17\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\12\11\1\u015b\16\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\5\11\1\u015c\23\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\6\11\1\u015d\22\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\12\11\1\u015e\16\11\6\0\1\11\2\0\6\11\2\0"+
    "\2\11\7\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\4\0\6\11\1\u015f\22\11\6\0"+
    "\1\11\2\0\6\11\2\0\2\11\7\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\4\0"+
    "\31\11\6\0\1\11\2\0\6\11\2\0\2\11\7\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\1\u0160\1\11\4\0\31\11\6\0\1\11\2\0\5\11"+
    "\1\u0161\2\0\2\11\7\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\2\11\4\0\30\11\1\u0162"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\6\11\1\u0163\22\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\12\11\1\u0164\16\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\23\11\1\u0165\5\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\23\11\1\u0166\5\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\7\11\1\u0167\21\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\4\0\1\11\1\u0168\27\11"+
    "\6\0\1\11\2\0\6\11\2\0\2\11\7\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\2\11"+
    "\4\0\10\11\1\u0169\20\11\6\0\1\11\2\0\6\11"+
    "\2\0\2\11\7\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19044];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\22\1\2\11\1\1\1\11\1\1\3\11"+
    "\4\1\7\11\1\1\2\11\52\1\5\11\1\0\6\1"+
    "\1\0\1\11\1\0\1\1\5\0\1\11\2\0\1\1"+
    "\1\0\57\1\1\11\6\1\2\11\1\1\2\0\1\11"+
    "\1\0\62\1\1\0\1\1\1\0\46\1\2\0\36\1"+
    "\2\0\100\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public DafnyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DafnyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 94: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 95: break;
          case 3: 
            { return IDENTDEF;
            } 
            // fall through
          case 96: break;
          case 4: 
            { return COLON;
            } 
            // fall through
          case 97: break;
          case 5: 
            { return COMMA;
            } 
            // fall through
          case 98: break;
          case 6: 
            { return VERTICALBAR;
            } 
            // fall through
          case 99: break;
          case 7: 
            { return BULLET;
            } 
            // fall through
          case 100: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 101: break;
          case 9: 
            { return BACKTICK;
            } 
            // fall through
          case 102: break;
          case 10: 
            { return SEMI;
            } 
            // fall through
          case 103: break;
          case 11: 
            { return CLOSEANGLEBRACKET;
            } 
            // fall through
          case 104: break;
          case 12: 
            { return LBRACE;
            } 
            // fall through
          case 105: break;
          case 13: 
            { return RBRACE;
            } 
            // fall through
          case 106: break;
          case 14: 
            { return LBRACKET;
            } 
            // fall through
          case 107: break;
          case 15: 
            { return RBRACKET;
            } 
            // fall through
          case 108: break;
          case 16: 
            { return OPENPAREN;
            } 
            // fall through
          case 109: break;
          case 17: 
            { return CLOSEPAREN;
            } 
            // fall through
          case 110: break;
          case 18: 
            { return OPENANGLEBRACKET;
            } 
            // fall through
          case 111: break;
          case 19: 
            { return NEQALT;
            } 
            // fall through
          case 112: break;
          case 20: 
            { return STAR;
            } 
            // fall through
          case 113: break;
          case 21: 
            { return DIGITS;
            } 
            // fall through
          case 114: break;
          case 22: 
            { return BY;
            } 
            // fall through
          case 115: break;
          case 23: 
            { return AS;
            } 
            // fall through
          case 116: break;
          case 24: 
            { return IN;
            } 
            // fall through
          case 117: break;
          case 25: 
            { return DOUBLECOLON;
            } 
            // fall through
          case 118: break;
          case 26: 
            { return BOREDSMILEY;
            } 
            // fall through
          case 119: break;
          case 27: 
            { return GETS;
            } 
            // fall through
          case 120: break;
          case 28: 
            { return EQ;
            } 
            // fall through
          case 121: break;
          case 29: 
            { return DARROW;
            } 
            // fall through
          case 122: break;
          case 30: 
            { return NEQ;
            } 
            // fall through
          case 123: break;
          case 31: 
            { return STRINGTOKEN;
            } 
            // fall through
          case 124: break;
          case 32: 
            { return BVTOKEN;
            } 
            // fall through
          case 125: break;
          case 33: 
            { return INT;
            } 
            // fall through
          case 126: break;
          case 34: 
            { return NATTOKEN;
            } 
            // fall through
          case 127: break;
          case 35: 
            { return SET;
            } 
            // fall through
          case 128: break;
          case 36: 
            { return SEQ;
            } 
            // fall through
          case 129: break;
          case 37: 
            { return MAP;
            } 
            // fall through
          case 130: break;
          case 38: 
            { return ELLIPSIS;
            } 
            // fall through
          case 131: break;
          case 39: 
            { return VAR;
            } 
            // fall through
          case 132: break;
          case 40: 
            { return NOTIN;
            } 
            // fall through
          case 133: break;
          case 41: 
            { return CHARTOKEN;
            } 
            // fall through
          case 134: break;
          case 42: 
            { return COMMENT;
            } 
            // fall through
          case 135: break;
          case 43: 
            { return DECIMALDIGITS;
            } 
            // fall through
          case 136: break;
          case 44: 
            { return HEXDIGITS;
            } 
            // fall through
          case 137: break;
          case 45: 
            { return EOF;
            } 
            // fall through
          case 138: break;
          case 46: 
            { return BOOL;
            } 
            // fall through
          case 139: break;
          case 47: 
            { return CHAR;
            } 
            // fall through
          case 140: break;
          case 48: 
            { return CALC;
            } 
            // fall through
          case 141: break;
          case 49: 
            { return CASE;
            } 
            // fall through
          case 142: break;
          case 50: 
            { return REAL;
            } 
            // fall through
          case 143: break;
          case 51: 
            { return ISET;
            } 
            // fall through
          case 144: break;
          case 52: 
            { return IMAP;
            } 
            // fall through
          case 145: break;
          case 53: 
            { return THEN;
            } 
            // fall through
          case 146: break;
          case 54: 
            { return TYPE;
            } 
            // fall through
          case 147: break;
          case 55: 
            { return ELSE;
            } 
            // fall through
          case 148: break;
          case 56: 
            { return OBJECT_Q;
            } 
            // fall through
          case 149: break;
          case 57: 
            { return LEMMA;
            } 
            // fall through
          case 150: break;
          case 58: 
            { return CONST;
            } 
            // fall through
          case 151: break;
          case 59: 
            { return CLASSTOKEN;
            } 
            // fall through
          case 152: break;
          case 60: 
            { return READS;
            } 
            // fall through
          case 153: break;
          case 61: 
            { return TRAIT;
            } 
            // fall through
          case 154: break;
          case 62: 
            { return GHOST;
            } 
            // fall through
          case 155: break;
          case 63: 
            { return OBJECT;
            } 
            // fall through
          case 156: break;
          case 64: 
            { return ARRAYTOKEN;
            } 
            // fall through
          case 157: break;
          case 65: 
            { return ASSUME;
            } 
            // fall through
          case 158: break;
          case 66: 
            { return REVEAL;
            } 
            // fall through
          case 159: break;
          case 67: 
            { return IMPORT;
            } 
            // fall through
          case 160: break;
          case 68: 
            { return EXPORT;
            } 
            // fall through
          case 161: break;
          case 69: 
            { return STATIC;
            } 
            // fall through
          case 162: break;
          case 70: 
            { return STRING;
            } 
            // fall through
          case 163: break;
          case 71: 
            { return METHOD;
            } 
            // fall through
          case 164: break;
          case 72: 
            { return COLEMMA;
            } 
            // fall through
          case 165: break;
          case 73: 
            { return ARRAYTOKEN_Q;
            } 
            // fall through
          case 166: break;
          case 74: 
            { return NEWTYPE;
            } 
            // fall through
          case 167: break;
          case 75: 
            { return ENSURES;
            } 
            // fall through
          case 168: break;
          case 76: 
            { return ORDINAL;
            } 
            // fall through
          case 169: break;
          case 77: 
            { return WITNESS;
            } 
            // fall through
          case 170: break;
          case 78: 
            { return REQUIRES;
            } 
            // fall through
          case 171: break;
          case 79: 
            { return ITERATOR;
            } 
            // fall through
          case 172: break;
          case 80: 
            { return TWOSTATE;
            } 
            // fall through
          case 173: break;
          case 81: 
            { return MODIFIES;
            } 
            // fall through
          case 174: break;
          case 82: 
            { return MULTISET;
            } 
            // fall through
          case 175: break;
          case 83: 
            { return DATATYPE;
            } 
            // fall through
          case 176: break;
          case 84: 
            { return FUNCTION;
            } 
            // fall through
          case 177: break;
          case 85: 
            { return INDUCTIVE;
            } 
            // fall through
          case 178: break;
          case 86: 
            { return INVARIANT;
            } 
            // fall through
          case 179: break;
          case 87: 
            { return PROTECTED;
            } 
            // fall through
          case 180: break;
          case 88: 
            { return PREDICATE;
            } 
            // fall through
          case 181: break;
          case 89: 
            { return DECREASES;
            } 
            // fall through
          case 182: break;
          case 90: 
            { return CODATATYPE;
            } 
            // fall through
          case 183: break;
          case 91: 
            { return CONSTRUCTOR;
            } 
            // fall through
          case 184: break;
          case 92: 
            { return COPREDICATE;
            } 
            // fall through
          case 185: break;
          case 93: 
            { return VERTICALBAREXPRESSION;
            } 
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
